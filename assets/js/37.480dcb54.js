(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{305:function(s,e,t){"use strict";t.r(e);var a=t(13),n=Object(a.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("!!!")]),s._v(" "),t("p",[s._v("This document has "),t("strong",[s._v("moved")]),s._v(".")]),s._v(" "),t("p",[s._v("You'll now find information like this in the "),t("a",{attrs:{href:"https://github.com/ipld/ipld/",target:"_blank",rel:"noopener noreferrer"}},[s._v("ipld/ipld"),t("OutboundLink")],1),s._v(" meta-repo,\nand published to the web at https://ipld.io/ .")]),s._v(" "),t("p",[s._v("All documentation, fixtures, specifications, and web content is now gathered into that repo.\nPlease update your links, and direct new contributions there.")]),s._v(" "),t("p",[s._v("!!!")]),s._v(" "),t("hr"),s._v(" "),t("h1",{attrs:{id:"filecoin-data-structures-basic-types"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#filecoin-data-structures-basic-types"}},[s._v("#")]),s._v(" Filecoin Data Structures Basic Types")]),s._v(" "),t("p",[s._v("These types are used throughout the Filecoin data structures.")]),s._v(" "),t("div",{staticClass:"language-ipldsch extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ipldsch"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Address is a `https://github.com/filecoin-project/go-address` in its binary byte format.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# It may be used as a hamt key, and will be often visualized or presented to users")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# in its more readable string form.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Address")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bytes")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Go big.Int")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Prefer presenting to users either as a number or a string view of the decimal number")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# for readability.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BigInt")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bytes")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# An indicator of which RPC method on an actor a message should trigger execution of.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MethodNum")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# The 'f0...' subset of Addresses used for the actual indexes of actors in a state root.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ActorID")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# the height of a block in the chain. Should fit in an Int64")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ChainEpoch")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# the ChainEpoch as bytes, where the integer is converted to its string form and")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# the string's bytes are used")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ChainEpochBytes")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bytes")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TokenAmount")])]),s._v(" BigInt\n\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PaddedPieceSize")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PeerID")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bytes")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SectorSize")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SectorNumber")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# the SectorNumber as bytes, where the integer is encoded as a uvarint and the")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# resulting bytes are used")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SectorNumberBytes")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bytes")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PartitionNumber")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BitField")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bytes")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StoragePower")])]),s._v(" BigInt\n\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DataCap")])]),s._v(" StoragePower\n\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DealID")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# the DealID as bytes, where the integer is encoded as a uvarint and the resulting")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# bytes are used")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DealIDBytes")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bytes")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DealWeight")])]),s._v(" BigInt\n\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Multiaddr")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bytes")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RegisteredSealProof")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransactionID")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# TxnID")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# the TransactionID as bytes, where the integer is encoded as a varint (not uvarint)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# and the resulting bytes are used")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransactionIDBytes")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bytes")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# A quantity of space x time (in byte-epochs) representing power committed to the network for some duration.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Spacetime")])]),s._v(" BigInt\n\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExitCode")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Message parameters are encoded as DAG-CBOR and the resulting bytes are")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# embedded as `Params` fields in some structs.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# See the Filecoin Messages Data Structures document for encoded DAG-CBOR message")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# params")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CborEncodedParams")])]),s._v(" Bytes\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Message receipt returns are encoded as DAG-CBOR and the resulting bytes are")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# embedded as the `Return` field in `MessageReceipt`.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# See the Filecoin Messages Data Structures document for encoded DAG-CBOR message")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# returns")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CborEncodedReturn")])]),s._v(" Bytes\n")])])]),t("h2",{attrs:{id:"crypto-types"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#crypto-types"}},[s._v("#")]),s._v(" Crypto Types")]),s._v(" "),t("div",{staticClass:"language-ipldsch extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ipldsch"}},[t("code",[t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Signature")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("union")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  SignatureSecp256k1 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n  SignatureBLS "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token representation"}},[s._v("} "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("representation")])]),s._v(" byteprefix\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);