(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{334:function(e,t,a){"use strict";a.r(t);var s=a(13),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("!!!")]),e._v(" "),a("p",[e._v("This document has "),a("strong",[e._v("moved")]),e._v(".")]),e._v(" "),a("p",[e._v("You'll now find information like this in the "),a("a",{attrs:{href:"https://github.com/ipld/ipld/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ipld/ipld"),a("OutboundLink")],1),e._v(" meta-repo,\nand published to the web at https://ipld.io/ .")]),e._v(" "),a("p",[e._v("All documentation, fixtures, specifications, and web content is now gathered into that repo.\nPlease update your links, and direct new contributions there.")]),e._v(" "),a("p",[e._v("!!!")]),e._v(" "),a("hr"),e._v(" "),a("h1",{attrs:{id:"notes-on-manifesting-advanced-data-layouts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#notes-on-manifesting-advanced-data-layouts"}},[e._v("#")]),e._v(" Notes on Manifesting Advanced Data Layouts")]),e._v(" "),a("p",[e._v("This document is to explore some questions about Advanced Data Layouts (ADLs)\nand how they're:")]),e._v(" "),a("ul",[a("li",[e._v("created,")]),e._v(" "),a("li",[e._v("documented,")]),e._v(" "),a("li",[e._v("shared,")]),e._v(" "),a("li",[e._v("and used.")])]),e._v(" "),a("p",[e._v("... and perhaps most importantly, what user stories touch each of those facets,\nhow often we expect the same people to be carrying out more than one of those stories,\nand when not, what kind of coordination they would require between the parties;\nand finally, what all that implies for our library and API and spec designs.")]),e._v(" "),a("h2",{attrs:{id:"recap-of-the-story-so-far"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#recap-of-the-story-so-far"}},[e._v("#")]),e._v(" Recap of the story so far")]),e._v(" "),a("ul",[a("li",[e._v("ADLs are a cutout in the IPLD ecosystem specs which describe some Strongly Recommended library features.")]),e._v(" "),a("li",[e._v("ADLs are a way to present information as matching the Data Model -- so that\nit can be traversed and manipulated generically, like any other Data Model content --\nwhile not making any specification about how the data is actually stored.\n"),a("ul",[a("li",[e._v("Specifically, ADLs have the notable property of potentially using "),a("em",[e._v("multiple Blocks")]),e._v(" in their content.")])])]),e._v(" "),a("li",[e._v("Examples of important ADLs we image:\n"),a("ul",[a("li",[e._v("Presenting a Data Model "),a("code",[e._v("map")]),e._v(", while internally using multiple Blocks in a HAMT format.")]),e._v(" "),a("li",[e._v("Presenting a Data Model "),a("code",[e._v("bytes")]),e._v(", while internally using some tree structure, and chunks defined by some rolling checksum.")]),e._v(" "),a("li",[e._v("This is not an exclusive list: we expect to make it possible for users to make their own ADLs.")])])]),e._v(" "),a("li",[e._v("It is important to note that ADLs use some "),a("em",[e._v("code")]),e._v(" in order to do their internal work.\n"),a("ul",[a("li",[e._v("Often this code will be written the native language of whatever library ecosystem you're using;\nit may also be a interpreted code in some virtual machine; this is not a detail that's important here.")]),e._v(" "),a("li",[e._v("ADLs should be "),a("em",[e._v("specification driven")]),e._v(", so that it's not an undue burden to implement one natively\nin a language that currently doesn't have such an implementation.")]),e._v(" "),a("li",[e._v("Since ADLs use "),a("em",[e._v("code")]),e._v(", it follows that security conscious library users will want to whitelist ADLs\nwhich they'll allow the use of.  (This may be for resource accounting and DoS prevention, if nothing else.)")])])])]),e._v(" "),a("p",[e._v("ADLs are a tricky feature because they're intentionally somewhat open-ended\n(so that they're extensible and can be applied to use cases in the future we didn't expect in advance),\nyet still need to follow enough higher level rules that systems designed on IPLD remain understandable and reliable.")]),e._v(" "),a("p",[e._v("So: what are some more higher level rules we can establish?")]),e._v(" "),a("h2",{attrs:{id:"rules-we-re-fairly-sure-we-want"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rules-we-re-fairly-sure-we-want"}},[e._v("#")]),e._v(" Rules We're Fairly Sure We Want")]),e._v(" "),a("h3",{attrs:{id:"consuming-in-the-realm-of-ipld-schema-tooling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#consuming-in-the-realm-of-ipld-schema-tooling"}},[e._v("#")]),e._v(" consuming in the realm of IPLD Schema tooling")]),e._v(" "),a("ul",[a("li",[e._v("When I parse a schema, I want to validate that all types it references are defined at this time.\nIt is an error to not be able to tell, or to have dangling references.")]),e._v(" "),a("li",[e._v("When I parse a schema, I should be able to tell what "),a("em",[e._v("kind")]),e._v(" all types are at this time.\nIt is necessary to do this so we can perform additional sanity checks, such as that kinded unions are coherent.")]),e._v(" "),a("li",[e._v("When I parse a schema, I should be able to see if any advanced layouts will be required in order to fully understand this data.\n(It is not necessary for the ADL implementations to be provided in order for me to parse this schema; I just need to see where they will slot in.)")])]),e._v(" "),a("h3",{attrs:{id:"consuming-in-the-realm-of-coding-against-ipld-libraries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#consuming-in-the-realm-of-coding-against-ipld-libraries"}},[e._v("#")]),e._v(" consuming in the realm of coding against IPLD libraries")]),e._v(" "),a("ul",[a("li",[e._v("As a user writing code using an IPLD library, we should be able to use ADLs... with the Data Model interfaces.\nNo interfaces for IPLD Schema features should be necessary to reference to in order to activate an ADL.\nThis may be "),a("em",[e._v("verbose")]),e._v(", but it should be "),a("em",[e._v("possible")]),e._v(".")]),e._v(" "),a("li",[e._v("As a user who "),a("em",[e._v("does")]),e._v(" use IPLD Schemas, I should be additionally empowered:\nI should be able to take the Schema's hints about where ADLs will be required, and supply implementations up front.\n(This can be expected to be less verbose than the above, because all schematicADLname->ADLimpl mappings can be declared once, "),a("em",[e._v("up front")]),e._v(",\nrather than ADLimpl mappings being handled by programmatic logic that has to be applied mid-tree.)")])]),e._v(" "),a("h3",{attrs:{id:"consuming-in-the-realm-of-generic-behaviors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#consuming-in-the-realm-of-generic-behaviors"}},[e._v("#")]),e._v(" consuming in the realm of generic behaviors")]),e._v(" "),a("p",[e._v('(n.b. making up a word for this.\nMeans: things like "take this data CID, this schema CID, and this selector CID, and evaluate it";\nthis is something we expect tooling to be able to evaluate from those declarations -- '),a("em",[e._v("without writing code")]),e._v(",\nwhich makes it a very distinct story from what's covered in the previous heading.)")]),e._v(" "),a("ul",[a("li",[e._v('In the story "take this data CID, this schema CID, and this selector CID"...\n'),a("ul",[a("li",[e._v("If "),a("strong",[e._v("no")]),e._v(" ADL is involved, we simply expect this to succeed.")]),e._v(" "),a("li",[e._v("If an ADL "),a("strong",[e._v("is")]),e._v(" involved, it should either succeed, or fail "),a("em",[e._v("clearly")]),e._v(" (and as soon as possible).")]),e._v(" "),a("li",[e._v("If an ADL "),a("strong",[e._v("is")]),e._v(' involved, we should be able to provide an additional argument of "{schematicADLname}->{ADLimpl}" in order to succeed.')])])])]),e._v(" "),a("h3",{attrs:{id:"authoring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#authoring"}},[e._v("#")]),e._v(" authoring")]),e._v(" "),a("p",[e._v("("),a("em",[e._v("We're much less sure about authoring.  This is the big exploration topic right now.")]),e._v(")")]),e._v(" "),a("h3",{attrs:{id:"local-naming"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#local-naming"}},[e._v("#")]),e._v(" local naming")]),e._v(" "),a("p",[e._v('I\'ve used the term "schematicADLname" to above refer to the '),a("em",[e._v("local")]),e._v(" name of an ADL in a schema "),a("em",[e._v("using")]),e._v(" it.")]),e._v(" "),a("p",[e._v('E.g., "Fwee" and "Fwop" in the following schema are each an schematicADLname:')]),e._v(" "),a("div",{staticClass:"language-ipldsch extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ipldsch"}},[a("code",[a("span",{pre:!0,attrs:{class:"token typedef"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("advanced")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Fwee")])]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\tkind map\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token typedef"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("advanced")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Fwop")])]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\tkind "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("bytes")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token typedef"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("FancyBytes")])]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("bytes")]),e._v("\n  representation advanced Fwop\n\n"),a("span",{pre:!0,attrs:{class:"token typedef"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("FancyMap")])]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  representation advanced Fwee\n")])])]),a("p",[e._v("It may be important to disambiguate schematicADLname from the name or reference handle\nused for the ADL in any other context.")]),e._v(" "),a("p",[e._v("For example, note that the story for consuming ADLs as library user includes two paths:\nand one of them "),a("em",[e._v('does not allude to "schematicADLname"')]),e._v(" whatsoever.")]),e._v(" "),a("p",[e._v("It's also important to note that the name an author of an ADL uses versus\nthe name used locally in a consuming schema are not assumed to be in lock-step.\n(If they were, it would raise all sorts of questions about coordination,\nupdating, etc, to which we have not yet posed concrete answers.)")]),e._v(" "),a("p",[e._v("In fact, it's unclear if an author of an ADL even needs to name it at all in order to use it.")]),e._v(" "),a("h2",{attrs:{id:"current-discussion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#current-discussion"}},[e._v("#")]),e._v(" Current Discussion")]),e._v(" "),a("h3",{attrs:{id:"do-we-need-a-syntax-for-stating-an-adl-is-to-be-exported"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#do-we-need-a-syntax-for-stating-an-adl-is-to-be-exported"}},[e._v("#")]),e._v(' Do we need a syntax for stating an ADL is to be "exported"?')]),e._v(" "),a("p",[e._v('(Whatever "exported" means -- this has itself not yet been fully described.)')]),e._v(" "),a("p",[e._v("Unclear.")]),e._v(" "),a("p",[e._v("We may certainly find it "),a("em",[e._v("nice")]),e._v(", for documentation purposes.")]),e._v(" "),a("h3",{attrs:{id:"is-such-a-syntax-part-of-the-schema-dsl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-such-a-syntax-part-of-the-schema-dsl"}},[e._v("#")]),e._v(" Is such a syntax part of the Schema DSL?")]),e._v(" "),a("p",[e._v('If the answer to the above question is "yes":\nShould it be in a similar syntax and in the same files as schema DSL statements?')]),e._v(" "),a("p",[e._v("Unclear.")]),e._v(" "),a("p",[e._v("Further exploratory questions:")]),e._v(" "),a("ul",[a("li",[e._v("Does it make sense to be able to export more than one ADL from the same file?\n"),a("ul",[a("li",[e._v("How often will two different ADLs share internal types?\n"),a("ul",[a("li",[e._v('Does it matter?  Would "vendoring" the defn\'s twice hurt anyone or make anything impossible?')])])])])])]),e._v(" "),a("h3",{attrs:{id:"what-information-might-be-useful-in-an-export-declaration-for-an-adl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-information-might-be-useful-in-an-export-declaration-for-an-adl"}},[e._v("#")]),e._v(' What information might be useful in an "export" declaration for an ADL?')]),e._v(" "),a("p",[e._v('"RootType" specifically recurs often as an idea that seems potentially useful.')]),e._v(" "),a("p",[e._v("Question: if the code for the ADL impl defacto needs to refer to this type,\nis it strictly necessary to state it (redundantly) in the export declaration?")]),e._v(" "),a("p",[e._v("Do we expect consumers of ADLs to be able to inspect the ADL's Schema,\neven if they "),a("em",[e._v("do not")]),e._v(" evaluate its "),a("em",[e._v("code")]),e._v("?\nDoes that unlock any interesting features?  (Maybe!)")]),e._v(" "),a("h3",{attrs:{id:"are-adls-required-to-have-a-schema-describing-their-internal-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#are-adls-required-to-have-a-schema-describing-their-internal-data"}},[e._v("#")]),e._v(" Are ADLs required to have a schema describing their internal data?")]),e._v(" "),a("p",[e._v('("required" as in RFC 6919 "MUST")')]),e._v(" "),a("p",[a("em",[e._v("Probably not.")]),e._v("\nAt least, there's been no explicit choice -- so far -- to mandate it.")]),e._v(" "),a("p",[e._v('We might expect most of them to, because it\'s just a high-leverage, useful choice.\nWe imagine ourselves using schemas to develop the ADLs we\'re authoring!\nBut "a good idea" and a "must" are different things.')]),e._v(" "),a("p",[e._v("Sub-question: Do we expect ADLs to have "),a("em",[e._v("exactly one")]),e._v(" (not two or more) schema?")]),e._v(" "),a("p",[a("em",[a("strong",[e._v("Probably not")])]),e._v(' -- use of multiple schemas in a "try stack" might be a useful feature\nfor the ADL code author to do version detection and graceful migrations... just like anywhere else.')]),e._v(" "),a("h2",{attrs:{id:"resolutions-and-bets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resolutions-and-bets"}},[e._v("#")]),e._v(" Resolutions and Bets")]),e._v(" "),a("h3",{attrs:{id:"making-library-apis-for-adls"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#making-library-apis-for-adls"}},[e._v("#")]),e._v(" making library APIs for ADLs")]),e._v(" "),a("p",[e._v("Yes.  Let's do it.  Purely a forward and learning experience,\nand we're almost certain to need it regardless.")]),e._v(" "),a("h3",{attrs:{id:"proposing-properties-for-declarative-manifests-required-for-exporting-adls"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proposing-properties-for-declarative-manifests-required-for-exporting-adls"}},[e._v("#")]),e._v(" proposing properties for declarative manifests required for exporting ADLs")]),e._v(" "),a("p",[e._v("Maybe?")]),e._v(" "),a("p",[e._v("We can make drafts and proposals around this that are free-standing,\nso it's probably very viable to experiment with this freely.")]),e._v(" "),a("h3",{attrs:{id:"proposing-ipld-schema-dsl-syntax-for-adl-export-manifests"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proposing-ipld-schema-dsl-syntax-for-adl-export-manifests"}},[e._v("#")]),e._v(" proposing IPLD Schema DSL syntax for ADL export manifests")]),e._v(" "),a("p",[e._v("Maybe?")]),e._v(" "),a("p",[e._v("This is relatively difficult to do as an experiment of limited scope.")]),e._v(" "),a("h3",{attrs:{id:"review-this-again"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#review-this-again"}},[e._v("#")]),e._v(" review this again")]),e._v(" "),a("p",[e._v("In a few months, after experimenting with library APIs, we'll probably have\nadditional experiences which will be useful input for reviewing this design.")]),e._v(" "),a("p",[e._v("Ideally, we'd like to gain those experiences in more than one library and language.")]),e._v(" "),a("p",[e._v("Let's make a point to re-check these ideas as that info becomes available.")])])}),[],!1,null,null,null);t.default=n.exports}}]);