(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{318:function(e,t,a){"use strict";a.r(t);var s=a(13),o=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("!!!")]),e._v(" "),a("p",[e._v("This document has "),a("strong",[e._v("moved")]),e._v(".")]),e._v(" "),a("p",[e._v("You'll now find information like this in the "),a("a",{attrs:{href:"https://github.com/ipld/ipld/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ipld/ipld"),a("OutboundLink")],1),e._v(" meta-repo,\nand published to the web at https://ipld.io/ .")]),e._v(" "),a("p",[e._v("All documentation, fixtures, specifications, and web content is now gathered into that repo.\nPlease update your links, and direct new contributions there.")]),e._v(" "),a("p",[e._v("!!!")]),e._v(" "),a("hr"),e._v(" "),a("h1",{attrs:{id:"graphsync"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#graphsync"}},[e._v("#")]),e._v(" GraphSync")]),e._v(" "),a("p",[e._v("GraphSync is a protocol and implementation to retrieve a subgraph of a DAG with providing a CID plus some meta information (aka. IPLD Selector) about which parts should be returned.")]),e._v(" "),a("h2",{attrs:{id:"definitions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#definitions"}},[e._v("#")]),e._v(" Definitions")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("Client")]),e._v(": The peer that sends out a request.")]),e._v(" "),a("li",[a("strong",[e._v("Server")]),e._v(": The peer that is receiving a request from a Client and responds to it.")]),e._v(" "),a("li",[a("strong",[e._v("Consumer")]),e._v(": The Consumer is between the Client and the Server. It verifies the DAG, filters things and does retries between peers.")]),e._v(" "),a("li",[a("strong",[e._v("Selector")]),e._v(": Some identifier (flag) together with some data describing a traversal in the DAG")]),e._v(" "),a("li",[a("strong",[e._v("Block")]),e._v(": A CID together with the corresponding binary data")])]),e._v(" "),a("h2",{attrs:{id:"general-architecture"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#general-architecture"}},[e._v("#")]),e._v(" General architecture")]),e._v(" "),a("p",[e._v("GraphSync needs to do a lot of things in the background like verification and error handling when connecting to different peers. Hence there is a difference  between the Client-Server interface and the actual wire protocol.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("┌───────────────────┐     ┌──────┐\n│       Local       │     │Remote│\n│                   │     │      │\n│Client <─> Consumer│ <─> │Server│\n└───────────────────┘     └──────┘\n")])])]),a("p",[e._v("GraphSync (both the Consumer and the Server) returns a stream of Blocks. The order of the Blocks is the same as if it was a local traversal.")]),e._v(" "),a("p",[e._v("The Consumer verifies the Blocks to make sure there are no malicious ones. It might also apply some filters as requested by the Client.")]),e._v(" "),a("h3",{attrs:{id:"client"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#client"}},[e._v("#")]),e._v(" Client")]),e._v(" "),a("p",[e._v("The Client requests a sub-DAG with a CID and a Selector and receives a stream of Blocks.")]),e._v(" "),a("h3",{attrs:{id:"consumer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#consumer"}},[e._v("#")]),e._v(" Consumer")]),e._v(" "),a("p",[e._v("Some filtering requested by the Selector sent from the Client might not be possible without additional verification, that needs a bigger set of blocks. Hence the Consumer might send a modified Selector to the Server, which fulfills the needs in order to verify the result.")]),e._v(" "),a("p",[e._v("After the verification and possible additional filtering of the Blocks that were returned by the Server, those Blocks are returned to the Client.")]),e._v(" "),a("p",[e._v("So far things were simplified to a single Server. In reality the Consumer will connect to several peers. Not all of them might have all the data locally available, that is needed to fulfill the request. The Consumer deals with all the challenges related to connecting to several peers and possible errors. The Client will only receive an error if it can't be resolved by the Consumer.")]),e._v(" "),a("h3",{attrs:{id:"server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#server"}},[e._v("#")]),e._v(" Server")]),e._v(" "),a("p",[e._v("The Selectors the Server understands is a subset from those the Consumer can process. A Server might only contain a subset of the data that is needed to fulfill the request. If that's the case, then an error message is returned which contains the CID of the Block that is missing as well as all Blocks that are needed for further verification.")]),e._v(" "),a("h2",{attrs:{id:"peers-with-subsets-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#peers-with-subsets-only"}},[e._v("#")]),e._v(" Peers with subsets only")]),e._v(" "),a("p",[e._v("This section describes how the Consumer is dealing with peers that only contain a subset of the data that is needed in order to fulfill the request. It is not about error handling for cases like connectivity issues.")]),e._v(" "),a("p",[e._v("The following pseudo code describes a possible algorithm:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const peers = <connected-peers>\n\nconst doGraphSync = function* (peers, cid, selector) {\n  const peer = peers.nextPeer()\n  const messages = peer.graphSync(cid, selector)\n\n  for (const message of messages) {\n    if (message.isBlock()) {\n      yield {\n        cid: message.cid,\n        block: message.block\n      }\n    }\n    // Server has only a subset of the requested DAG\n    else if (message.isNotFound()) {\n      // Error if none of the peers has the CID\n\n      yield doGraphSync(peers, message.cid, selector)\n    }\n  }\n}\n\nconst blocks = doGraphSync(peers, <cid>, <selector>)\nfor (const block in blocks) {\n  // Do something with the blocks\n}\n")])])]),a("p",[e._v("A peer gets are request with a certain CID and Selector. As long as that peer contains all the data that is needed to fulfill the request, a stream of Blocks is returned.")]),e._v(" "),a("p",[e._v("If the peer doesn't have a certain Block, it returns an error and the Consumer will request that Block together with the Selector again from another that can hopefully fulfill the request.")]),e._v(" "),a("p",[e._v("In the error case, it is not enough to return the CID of only the Block that wasn't available. The error also needs to contain more context in order to resume the traversal on another peer. Here's an example to make it clearer:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("                      ┏━┳━┱─┐\n                      ┃█┃█┃ │\n                      ┗━┻━┹─┘\n       ┌───────────────┘ │ └──────────────┐\n    ┏━┳━┳━┓          ┏━┳━┳━┱─┐          ┌─┬─┐\n    ┃█┃█┃█┃          ┃█┃█┃╳┃ │          │ │ │\n    ┗━┻━┻━┛          ┗━┻━┻━┹─┘          └─┴─┘\n  ┌──┘ │ └──┐     ┌───┘┌┘ └┐└────┐     ┌─┘ └┐\n┏━┳━┓┏━┳━┓┏━┳━┓ ┏━┳━┓┏━┳━┓┌─┬─┐┌─┬─┐ ┌─┬─┐┌─┬─┐\n┃█┃█┃┃█┃█┃┃█┃█┃ ┃█┃█┃┃█┃█┃│ │ ││ │ │ │ │ ││ │ │\n┗━┻━┛┗━┻━┛┗━┻━┛ ┗━┻━┛┗━┻━┛└─┴─┘└─┴─┘ └─┴─┘└─┴─┘\n\n")])])]),a("p",[e._v("The filled nodes are the one that can't be found on the requested peer. It will return the nodes up to the one marked as "),a("code",[e._v("╳")]),e._v(". If it would just return that CID as error, the consumer would have no knowledge of its siblings or its parent. Hence the error also needs to contain the full path to the root. The Consumer can then use that context for resuming the traversal correctly on another peer.")]),e._v(" "),a("p",[e._v("If none of the peers contain a certain block, an Error to the Client is returned.")]),e._v(" "),a("h2",{attrs:{id:"unixfs-v1-as-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unixfs-v1-as-example"}},[e._v("#")]),e._v(" UnixFS v1 as example")]),e._v(" "),a("p",[e._v("Using UnixFS v1 as an example for a Selector making things more concrete.")]),e._v(" "),a("h3",{attrs:{id:"client-consumer-interface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#client-consumer-interface"}},[e._v("#")]),e._v(" Client/Consumer interface")]),e._v(" "),a("p",[e._v("Those are the fields of the Selector:")]),e._v(" "),a("ul",[a("li",[e._v("Byte offset: to seek in a file")]),e._v(" "),a("li",[e._v("Payload length: to get the file up to certain byte position, e.g. for buffering")]),e._v(" "),a("li",[e._v("Max depth: the maximum depth of the traversal (e.g. to get directories only n levels deep)")]),e._v(" "),a("li",[e._v("Path: get the subtree of a specific path (e.g. a file in a directory)")]),e._v(" "),a("li",[e._v('Type: e.g. "File" or "Directory"')]),e._v(" "),a("li",[e._v("Payload nodes: (Boolean) whether to return only nodes containing data or not")])]),e._v(" "),a("h3",{attrs:{id:"consumer-server-interface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#consumer-server-interface"}},[e._v("#")]),e._v(" Consumer/Server interface")]),e._v(" "),a("p",[e._v("The Consumer needs to make sure that it doesn't forward malicious nodes to the Client. For the "),a("code",[e._v("Byte offset")]),e._v(" we need to get the whole subtree from offset 0 to the requested on in order to verify it. Those additional nodes will not be forwarded to the Client.")]),e._v(" "),a("p",[e._v("Most of the fields from the Selector the Client provided are used. An exception is the "),a("code",[e._v("Type")]),e._v(" and "),a("code",[e._v("Payload nodes")]),e._v(". Even nodes not conforming those filters need to be returned by the Server for verification. The Consumer will then apply those filters in order to return only the requested nodes to the Client.")]),e._v(" "),a("h2",{attrs:{id:"misc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#misc"}},[e._v("#")]),e._v(" Misc")]),e._v(" "),a("h3",{attrs:{id:"ideas-for-selectors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ideas-for-selectors"}},[e._v("#")]),e._v(" Ideas for Selectors")]),e._v(" "),a("p",[e._v("If a Selector can operate over several different Multicodec types (UnixFS v1 is always only "),a("code",[e._v("dag-pb")]),e._v("), it makes sense to be able to filter on it. The use case is a call to GraphSync where the initiator can't parse all kinds of Blocks, but only certain ones.")]),e._v(" "),a("h3",{attrs:{id:"better-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#better-name"}},[e._v("#")]),e._v(" Better name")]),e._v(" "),a("p",[e._v('The name "GraphSync" is catchy, but it doesn\'t really describe what it is about. Please let us know if you have an idea for a better name.')]),e._v(" "),a("h3",{attrs:{id:"credits-thanks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#credits-thanks"}},[e._v("#")]),e._v(" Credits/thanks")]),e._v(" "),a("p",[e._v("A huge thanks to @b5 and @mib-kd743naq for nailing a lot of nitty-gritty details down during the GraphSync Deep-Dive at the "),a("a",{attrs:{href:"https://github.com/ipfs/developer-meetings",target:"_blank",rel:"noopener noreferrer"}},[e._v("IPFS Developer Meetings 2018"),a("OutboundLink")],1),e._v(" in Berlin. Also thanks @jbenet and @stebalien for finding an agreement on key things very quickly.")]),e._v(" "),a("h2",{attrs:{id:"comments-on-this-pr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comments-on-this-pr"}},[e._v("#")]),e._v(" Comments on this PR")]),e._v(" "),a("p",[e._v("This document was originally "),a("a",{attrs:{href:"https://github.com/ipld/specs/pull/66",target:"_blank",rel:"noopener noreferrer"}},[e._v("PR-66"),a("OutboundLink")],1),e._v(". It spawned a lively discussion. This discussion is preserved here for completeness.")]),e._v(" "),a("h3",{attrs:{id:"_66-proposal-graphsync-a-open"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_66-proposal-graphsync-a-open"}},[e._v("#")]),e._v(" #66: Proposal: GraphSync (A) (open)")]),e._v(" "),a("p",[e._v("Opened 2018-07-16T12:59:50Z by vmx")]),e._v(" "),a("p",[e._v("These are the current thoughts about GraphSync written down in a\nsingle document.")]),e._v(" "),a("p",[e._v("This also contains the results from the Deep-Dive session at the\nDeveloper Meeting 2018 in Berlin.")]),e._v(" "),a("p",[e._v("This document should be seen as a starting point, not as a complete, ready to merge thing.")]),e._v(" "),a("p",[e._v("/cc @b5 @diasdavid @jbenet @mib-kd743naq  @Stebalien")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-07-20t23-32-50z-stebalien"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-07-20t23-32-50z-stebalien"}},[e._v("#")]),e._v(" (2018-07-20T23:32:50Z) Stebalien:")]),e._v(" "),a("p",[e._v("I'm having trouble getting a picture of the protocol from this document, even as a starting point.")]),e._v(" "),a("p",[e._v("I'm seeing:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('User -> GraphSync  <-> GraphSync <-> Something? Server? Per selector?\n^ |\n| v\n"Consumer" for selector type Y\n')])])]),a("p",[e._v('Where the "Consumer" for selector type Y "executes" selectors of type Y, puppeting the GraphSync "client". Is that correct? If so, I\'d like to be careful to avoid putting '),a("em",[e._v("too")]),e._v(' much logic in the "Consumer" as we don\'t want implementing new selectors to be hard.')]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-07-23t12-13-16z-vmx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-07-23t12-13-16z-vmx"}},[e._v("#")]),e._v(" (2018-07-23T12:13:16Z) vmx:")]),e._v(" "),a("p",[e._v("I think you are correct. The point of the Consumer is that the GraphSync part on the Server can be pretty minimal. Implementing new selectors would then mostly happen in the Consumer as the Server has already the basic building blocks implemented.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-08-03t06-50-57z-vmx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-08-03t06-50-57z-vmx"}},[e._v("#")]),e._v(" (2018-08-03T06:50:57Z) vmx:")]),e._v(" "),a("p",[e._v("/cc @ajbouh")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-09-19t18-49-22z-whyrusleeping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-09-19t18-49-22z-whyrusleeping"}},[e._v("#")]),e._v(" (2018-09-19T18:49:22Z) whyrusleeping:")]),e._v(" "),a("p",[e._v("@vmx do you have plans around wire format changes?")]),e._v(" "),a("p",[e._v("Also, any thoughts towards real world performance of such algorithms? A lot goes into making bitswap both fast, and not wasteful. The duplicate blocks issue is pretty significant, and worth designing solutions that take it into account. For example, in the happy case, we can ask one person for the data, they can tell us what they don't have, and we can then ask others for that data. But that relies on us trusting that the other peer will be honest, and fast.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-09-20t09-42-34z-vmx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-09-20t09-42-34z-vmx"}},[e._v("#")]),e._v(" (2018-09-20T09:42:34Z) vmx:")]),e._v(" "),a("p",[e._v("@whyrusleeping Currently GraphSync is becoming more of a RPC cal thing, not a real Bitswap replacements. Perhaps GraphSync could then be used as building block. While implementing what "),a("em",[e._v("I think")]),e._v(" GraphSync is, I get more and more doubts that it is useful.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-09-20t18-26-20z-whyrusleeping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-09-20t18-26-20z-whyrusleeping"}},[e._v("#")]),e._v(" (2018-09-20T18:26:20Z) whyrusleeping:")]),e._v(" "),a("p",[e._v("@vmx don't get me wrong, I think GraphSync (in some form) will be incredibly useful. The hard part is just figuring out what that looks like.")]),e._v(" "),a("p",[e._v("I've been grappling with the latency vs bandwidth waste vs centralization tradeoffs lately, and its tough. Some tools that i'm thinking might be useful:")]),e._v(" "),a("ul",[a("li",[e._v("A 'would you send me this?' flag in wantlist entries that tells the other side only to send back an indication of whether they can provide the content. Alternatively, we could just send single 'findProvider' rpcs to each of the peers (not do a full DHT crawl).")]),e._v(" "),a("li",[e._v("(as you also suggest) A 'Nack' response. Where if you ask a peer for some content, and they don't have it, they return a 'Nack' or 'ErrNotFound'. This should be optional, and specified in the wantlist, but it saves us from having to send out cancels, and also allows us to more effectively distribute and schedule requests across our peers. The downside is that a mischievous node may just refuse to send the Nack, messing up our accounting.")]),e._v(" "),a("li",[e._v("Provider hints. Our bitswap peers could send us information about other peers that might be beneficial for us to send requests to.")])]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-09-20t19-52-48z-b5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-09-20t19-52-48z-b5"}},[e._v("#")]),e._v(" (2018-09-20T19:52:48Z) b5:")]),e._v(" "),a("p",[e._v("Jumping in again to wave hands about "),a("em",[e._v("graph manifests")]),e._v(". I brought this up in cursory notion at this session, but have had some time to marinate, and think it's a concept worth revisiting.")]),e._v(" "),a("p",[e._v("For every discrete DAG "),a("em",[e._v("g")]),e._v(" one can construct a "),a("em",[e._v("manifest")]),e._v(" which is a second DAG of only block names and links (no content):")]),e._v(" "),a("p",[a("img",{attrs:{src:"2018.07-graphsync-a/MTE1NDM5MC80NTg0MTc5OS1lMTFjZGQ4MC1iY2U4LTExZTgtOWZkOS01NzI4NDRhYWJmNTkucG5n.png",alt:"graph_manifest"}})]),e._v(" "),a("p",[e._v("These manifests are relatively small. If expressed as a set of two lists (one of array-positional links and one of names/hashes) it should be possible to represent many gigs worth of IPFS DAG content in < 100kb of CBOR.")]),e._v(" "),a("p",[e._v('IMHO, the power of IPFS is derived from the dual expression of blocks as both graphs and flat lists. This is also a fault line that shows up in the seam between bitswap and graph sync. I think graph manifests are a missing "primitive" from IPFS.')]),e._v(" "),a("p",[e._v("These manifests have a few properties that are nice:")]),e._v(" "),a("ul",[a("li",[e._v("deterministic: a properly designed algo for generating manifests will generate the same manifest when given the same graph. Hash it, pass it to your friends. If the graph you're generating a manifest is immutable, manifest and hash of manifest are also immutable")]),e._v(" "),a("li",[e._v("one can generate a manifest of any subgraph")]),e._v(" "),a("li",[e._v("if implemented as a protocol, manifest generation can act as a challenge. You don't know if I've already generated this manifest ahead of time, and am simply asking you to compute it for trust purposes")]),e._v(" "),a("li",[e._v("When I "),a("em",[e._v("don't")]),e._v(" have a manifest, I can ask multiple peers for the manifest of the same graph root. Differing responses raise suspicion")]),e._v(" "),a("li",[a("em",[e._v("sooooooo cachable")]),e._v(", manifests could themselves be designed/required to fit into a single IPFS block.")])]),e._v(" "),a("p",[e._v("If I'm planning on efficiently planning my requests for blocks, I "),a("em",[e._v("really")]),e._v(" want this manifest as soon as possible. Once I have a manifest I can trust I know a shit tonne of important things:")]),e._v(" "),a("ul",[a("li",[e._v("when I'm done (progress)")]),e._v(" "),a("li",[e._v("what blocks to ask for")]),e._v(" "),a("li",[e._v("how blocks are related")])]),e._v(" "),a("p",[e._v("So this might be a graph-sync thing, but it could also be a structural outgrowth of a bitswap session: establish a trusted graph, then divy up block requests among the session. If block sizes are also in the manifest, one can match larger blocks to faster peers. The point being, a manifest gives me a primitive to plan my block requests, and makes optimizing request planning a matter of better matching")]),e._v(" "),a("p",[e._v("Downsides:")]),e._v(" "),a("ul",[a("li",[e._v("you need the entire graph to calculate a manifest, or at least a trusted list of names and links (you may be able to use manifests to generate other manifests... a story for another day)")]),e._v(" "),a("li",[e._v("graphs aren't super trivial to calculate, I could trick others into doing work they don't want to do if not rate limited or something. it's worth noting that calculating a manifest should be as cheap or cheaper as than through the block graph (cheaper if I can avoid loading associated data).")])]),e._v(" "),a("p",[e._v("Both of those downsides can be mitigated by implementing manifests as a protocol, where peers can dynamically generate manifests of arbitrary graphs & subgraphs, which is the only reason I think it should exist at the IPFS layer.")]),e._v(" "),a("p",[e._v("Adding in Graph manifests is kinda like turning IPFS into dynamic bittorrent 🤷‍♂️.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-09-21t09-56-56z-vmx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-09-21t09-56-56z-vmx"}},[e._v("#")]),e._v(" (2018-09-21T09:56:56Z) vmx:")]),e._v(" "),a("p",[e._v("I wrote this yesterday, before the two new comments from @whyrusleeping and @b5. I just keep it like that and post a follow-up comment on how this all relates to each other.")]),e._v(" "),a("h2",{attrs:{id:"definitions-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#definitions-2"}},[e._v("#")]),e._v(" Definitions")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("Client")]),e._v(": The peer that sends out a request.")]),e._v(" "),a("li",[a("strong",[e._v("Server")]),e._v(": The peer that is receiving a request from a Client and responds to it.")]),e._v(" "),a("li",[a("strong",[e._v("Node")]),e._v(": An item within the the DAG")])]),e._v(" "),a("h2",{attrs:{id:"intro"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#intro"}},[e._v("#")]),e._v(" Intro")]),e._v(" "),a("p",[e._v("I finally took the time to "),a("a",{attrs:{href:"https://github.com/vmx/js-transsub",target:"_blank",rel:"noopener noreferrer"}},[e._v("code"),a("OutboundLink")],1),e._v(' what I had in mind (based on this PR). After tackling a "give the full sub-DAG", I wanted to tackle an obvious candidate for GraphSync: UnixFS v1.')]),e._v(" "),a("p",[e._v("I then got deep into a rabbit hole. I thought I'll just execute the UnixFS  Engine code on the Server, so I don't have to re-implement that. It would then return all the Nodes it's visiting, which will then be the ones that are needed in order to perform the same query on the Client.")]),e._v(" "),a("p",[e._v("It turned out that such a RPC like call isn't really useful. It won't serve the purpose of being something that is a better Bitswap. If you'd have a subset of that Graph already, you'd still get a lot of Nodes you won't actually need. I came to that realisation after reading "),a("a",{attrs:{href:"https://github.com/ipld/specs/pull/66#issuecomment-422916992",target:"_blank",rel:"noopener noreferrer"}},[e._v("@whyrusleeping's comment"),a("OutboundLink")],1),e._v(" (thanks!).")]),e._v(" "),a("p",[e._v("I then thought I need to go back to the drawing board and talk to lots of people with more knowledge as I really hit a wall and need to start from scratch.")]),e._v(" "),a("h2",{attrs:{id:"a-better-way"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-better-way"}},[e._v("#")]),e._v(" A better way")]),e._v(" "),a("p",[e._v("Suddenly I had my own ideas and after a bit of thinking, I think I found a way to move forward which aligns with the stuff I already have. Make GraphSync less powerful than I intended and let the application layer deal with it. GraphSync will only support getting a full sub-DAG combined with a maximum depth. So if you want to get a single Node, you just have a maximum depth of 1.")]),e._v(" "),a("p",[e._v("Let me use UnixFS v1 as an example on how this is still powerful enough.")]),e._v(" "),a("h3",{attrs:{id:"getting-a-full-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getting-a-full-file"}},[e._v("#")]),e._v(" Getting a full file")]),e._v(" "),a("p",[e._v("The easiest case is if you request the full contents of a file. It's just the full sub-DAG of a specific path without any depth limitation.")]),e._v(" "),a("h3",{attrs:{id:"getting-only-the-first-few-bytes-of-a-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getting-only-the-first-few-bytes-of-a-file"}},[e._v("#")]),e._v(" Getting only the first few bytes of a file")]),e._v(" "),a("p",[e._v("You wouldn't want to transfer all Nodes of the file as only a small part is needed. For such a traversal you would need to keep track of the sizes of the Nodes that were already transmitted. That's a lot of logic and out of scope for GraphSync.")]),e._v(" "),a("p",[e._v("Instead UnixFs needs a bit more logic. It could fall back to how things currently work with Bitswap and request one block after another. Or it could be smarter and e.g. request all children of a certain Node. This would be a request with a maximum depth of 2. It could then inspect those nodes and do subsequent requests, e.g. for full sub-DAGs from some Nodes without an maximum depth limitation.")]),e._v(" "),a("h3",{attrs:{id:"getting-a-slice-of-a-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getting-a-slice-of-a-file"}},[e._v("#")]),e._v(" Getting a slice of a file")]),e._v(" "),a("p",[e._v("This case is about getting only a few bytes combined with a certain offset. It works similarly as the case above, which is without the offset.")]),e._v(" "),a("h3",{attrs:{id:"getting-another-slice-of-the-same-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getting-another-slice-of-the-same-file"}},[e._v("#")]),e._v(" Getting another slice of the same file")]),e._v(" "),a("p",[e._v("So far the cases would've work just well with the way described in the intro, doing a UnixFS traversal on the Server and transmitting all visited Nodes.")]),e._v(" "),a("p",[e._v("But this case is more interesting. If you want a slice of a file you previously got another slice from, it could be that you already have some of the Nodes stored locally. It would be a waste to request all those again from the Server.")]),e._v(" "),a("p",[e._v("The current system handles traversals where some Nodes are missing well, thanks to Bitswap it will get those missing Nodes from the network. GraphSync can't be used in such a transparent way as more context is needed (you could use GraphSync like Bitswap with requesting always with a maximum depth of 1, but that wouldn't improve anything). The traversal would signal that the requested Node is not available locally and then you can decide what to do. It could be that you request the full sub-DAG, or perhaps only the direct children. It's up to the current context and traversal that is going on, what is best suited.")]),e._v(" "),a("p",[e._v("If such a signal for a missing Node is provided by the traversal, it can be re-used for partial GraphSync replies. If you request a full sub-DAG it could well be that the Server has only a subset of the data. The logic already in place could then deal with such conditions.")]),e._v(" "),a("h2",{attrs:{id:"outro"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#outro"}},[e._v("#")]),e._v(" Outro")]),e._v(" "),a("p",[e._v("There's still a lot of open questions around how to process those incoming Nodes from a GraphSync request, but at the moment I think those are just implementation details that can be solved.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-09-21t10-17-48z-vmx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-09-21t10-17-48z-vmx"}},[e._v("#")]),e._v(" (2018-09-21T10:17:48Z) vmx:")]),e._v(" "),a("p",[e._v("@whyrusleeping I fully agree that the hard part is what GraphSync should look like. That's exactly what I struggle with.")]),e._v(" "),a("p",[e._v('My "better way" addresses the "NACK response" part. It could be extended to a "do you have the data?" request, although I guess if a peer has the data, we would want it anyway, so having a "NACK response" would be enough.')]),e._v(" "),a("p",[e._v('Or a "would you send me this?" could also be combined with @b5\'s Graphs Manifests and would not only reply with information about a single block, but with the whole sub-DAG this block links to.')]),e._v(" "),a("p",[e._v("Provider Hints could be the Graphs Manifests.")]),e._v(" "),a("p",[e._v('@b5 Thanks for the detailed information on the Graph Manifests. I can see how those could help to optimise the things I described in my "better way".')]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-09-24t18-00-33z-mikeal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-09-24t18-00-33z-mikeal"}},[e._v("#")]),e._v(" (2018-09-24T18:00:33Z) mikeal:")]),e._v(" "),a("blockquote",[a("p",[e._v("Graph Manifest")])]),e._v(" "),a("p",[e._v("Something related that I've been thinking about is creating an abstraction above a Block Store that stores metatdata about whether or not the store contains the entire graph linked to in the block.")]),e._v(" "),a("p",[e._v('This need came up in a proof-of-concept I wrote for "pushing" a graph called '),a("a",{attrs:{href:"https://github.com/mikeal/graph-push",target:"_blank",rel:"noopener noreferrer"}},[e._v("graph-push"),a("OutboundLink")],1),e._v('. Essentially, it exposed both a "shallow" and "deep" push based on whether or not the service has a block. Pushing this decision to the client was highly problematic, it means the client would have to choose between being either fast/efficient or reliable.')]),e._v(" "),a("ul",[a("li",[e._v("Block Store: Unsorted key/value store.")]),e._v(" "),a("li",[e._v("Stores block data indexed by multihash.")]),e._v(" "),a("li",[e._v("Graph Store: Boolean CID index on top of Block Store.")]),e._v(" "),a("li",[a("code",[e._v("true")]),e._v("/"),a("code",[e._v("false")]),e._v(" value for CID's. "),a("code",[e._v("true")]),e._v(" if underlying block store contains "),a("strong",[e._v("all")]),e._v(" the blocks referenced in the CID's graph.")])]),e._v(" "),a("p",[e._v("The reason I bring this up is, I don't see how a singular manifest scales well for very large graphs. It means that you either keep a static representation of the graph index for every CID or you do a fairly expensive query over a simpler index every time you generate the manifest. The manifest could also be incredibly large which leads me to think about all kinds of performance concerns. You can image solving these issues with depth definitions and options but this starts to get very complicated very fast and is always going to have cases that make any solution more or less optimized (deep vs. shallow graphs for instance).")]),e._v(" "),a("p",[e._v('It may be more flexible to simple be able to say "I contain '),a("strong",[e._v("all")]),e._v(' the blocks in the graph for this CID" or "I don\'t know how much of this graph I have." The client should be able to figure out the best way to prioritize getting the graph based on this information. It can traverse down the graph with a peer that has '),a("em",[e._v("some")]),e._v(" of the data until it hits a block that peer doesn't have. As it makes its way down the graph and has to find new peers in a very large graph it will see more peers that have the entire graph and can prioritize those peers.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-09-25t18-33-50z-b5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-09-25t18-33-50z-b5"}},[e._v("#")]),e._v(" (2018-09-25T18:33:50Z) b5:")]),e._v(" "),a("blockquote",[a("p",[e._v("The reason I bring this up is, I don't see how a singular manifest scales well for very large graphs.")])]),e._v(" "),a("p",[e._v("That's a really good question IMHO: how much could a graph manifest practically hold? If it's not enough info, then it's a bad design choice. Given that @vmx's "),a("em",[e._v("better way")]),e._v(" might be able to make use of these manifests, I've coded up a quick spike implementation to get a feel & see if this is worth discussing further:")]),e._v(" "),a("h3",{attrs:{id:"example-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-code"}},[e._v("#")]),e._v(" Example Code")]),e._v(" "),a("p",[e._v("https://github.com/qri-io/go-ipld-manifest")]),e._v(" "),a("p",[e._v("There's a test in there that runs some "),a("em",[e._v("extremely")]),e._v(' rough numbers of a 4-tiered Dag, where the first three tiers are small "link-only nodes" and the bottom ~3k nodes are all 256kb blocks. running that test with '),a("code",[e._v("go test -v")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("manifest representing 4043 nodes and 1.024210Gb of content is 253.921997kb as CBOR\n")])])]),a("p",[e._v("So based on this "),a("em",[e._v("very rough")]),e._v(" example, you could get around 1 Gig of content represented in a single manifest if stored as CBOR. I'm assuming a manifest should fit in a single block for caching purposes, but that may not necessarily be true. To keep the example \"real\" (lol) I've added in a list of block sizes to the manifest. Weather that's acceptable is, well, a question for y'all. It's worth noting this total-storable figure will drop with the switch to base32 cids.")]),e._v(" "),a("blockquote",[a("p",[e._v("Pushing this decision to the client was highly problematic, it means the client would have to choose between being either fast/efficient or reliable.")])]),e._v(" "),a("p",[e._v("I'm assuming we're operating in a peer-2-peer environment, and having trouble seeing how me (as a peer) having a list of all the blocks I need before I go get them "),a("em",[e._v("isn't")]),e._v(" worth the trouble. I'm guessing there's details & a good war story here that I'm having trouble getting to b/c of the client / server terminology. As far as I understand, we're trying to figure out a "),a("em",[e._v("protocol and implementation to retrieve a subgraph of a DAG with providing a CID plus some meta information")]),e._v(", which clearly has a connection to bitswap, the question is where to draw lines between those APIs, and what API GraphSync should expose (which I fully trust @vmx will handle 😉 ). I don't think graph manifests solve this problem. I'm proposing manifests are a missing building block in that process, and that there are other use cases for a graph manifest outside of graph sync (the big one being a proper progress indicator).")]),e._v(" "),a("blockquote",[a("p",[e._v("It means that you either keep a static representation of the graph index for every CID or you do a fairly expensive query over a simpler index every time you generate the manifest.")])]),e._v(" "),a("p",[e._v("There's a third option: only keeping manifests of important CIDs. In the common use cases that means root hashes. No need to keep a manifest of every CID, but being able to generate a manifest of any graph is a useful property. Manifests of immutable content are also immutable, so caching here is a win, but not vital. Being able to generate manifests as protocol level would alleviate the need for users to see this stuff, and open the door to future work with subgraph manifests.")]),e._v(" "),a("p",[e._v("The code example provided isn't usable as a measurement of performance b/c it's not doing any real node resolving. If network is involved, yes this will be a "),a("em",[e._v("very")]),e._v(" expensive operation that should be avoided entirely IMHO. (@mikeal here I think we're in agreement that a peer either having full graph or not is a vital piece of info for decision making).")]),e._v(" "),a("p",[e._v("If the peer has the full graph locally, calculating a manifest should be cheap. How cheap depends on plumbing I'm not super familiar with. Performance could indeed be a reason for not using the concept of a manifest at all, but to me if we can't generate a fast manifest of a complete graph we have locally, something is wrong.")]),e._v(" "),a("blockquote",[a("p",[e._v('It may be more flexible to simple be able to say "I contain all the blocks in the graph for this CID" or "I don\'t know how much of this graph I have." The client should be able to figure out the best way to prioritize getting the graph based on this information. It can traverse down the graph with a peer that has some of the data until it hits a block that peer doesn\'t have. As it makes its way down the graph and has to find new peers in a very large graph it will see more peers that have the entire graph and can prioritize those peers.')])]),e._v(" "),a("p",[e._v("I have two concerns here:")]),e._v(" "),a("ul",[a("li",[e._v("This conversation is happening over the network. Network is expensive.")]),e._v(" "),a("li",[e._v("The logic that drives this is IMHO, really hard when you put multiple peers speaking concurrently into the mix.")])]),e._v(" "),a("p",[e._v('To me the goal of a graph manifest is to get the client/requesting peer out of an information deficit as early as possible in the graph-sync process, allowing the requester to perform coordination duties, and to be able to concoct different strategies for delegating requests to peers in parallel. To me those "coordination duties" are where the graph sync work starts. If others can benefit from having manifests (I know we would), then I think it\'s a candidate for pushing lower into the stack.')]),e._v(" "),a("blockquote",[a("p",[e._v("Graph Store: Boolean CID index on top of Block Store.")])]),e._v(" "),a("p",[e._v("To me this is, like, super solid, which I interpret as part of the \"just store your graph information in a graph database\" school of thought. This has been suggested elsewhere (I think @lgierth is one of it's proponents). A graph database / index does sound smarter than one-off manifests, but I think even in that context they can work in tandem: generate a manifest from the graph DB so the requester can update it's knowledge of the merkle forest. Sounds like a lot of planning work that's above my pay grade 😉.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-09-25t18-46-37z-whyrusleeping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-09-25t18-46-37z-whyrusleeping"}},[e._v("#")]),e._v(" (2018-09-25T18:46:37Z) whyrusleeping:")]),e._v(" "),a("p",[e._v("@b5 for standard 'wide' graphs, what is the advantage of the graph manifest over simply doing a breadth first search over the dag?")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-09-25t18-48-52z-ajbouh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-09-25t18-48-52z-ajbouh"}},[e._v("#")]),e._v(" (2018-09-25T18:48:52Z) ajbouh:")]),e._v(" "),a("p",[e._v("Looks like awesome work!")]),e._v(" "),a("p",[e._v("Datasets like ImageNet have 10^6 entries (image files) in a single\ndirectory. IPFS really falls down when trying to handle scenarios like\nthis. In the abstract, a manifest sounds like a good solution. Though it\ncertainly won't fit in a single block!")]),e._v(" "),a("p",[e._v("On Tue, Sep 25, 2018, 11:33 b5 "),a("a",{attrs:{href:"mailto:notifications@github.com"}},[e._v("notifications@github.com")]),e._v(" wrote:")]),e._v(" "),a("blockquote",[a("p",[e._v("The reason I bring this up is, I don't see how a singular manifest scales\nwell for very large graphs.")]),e._v(" "),a("p",[e._v("That's a really good question IMHO: how much could a graph manifest\npractically hold? If it's not enough info, then it's a bad design choice.\nGiven that @vmx "),a("a",{attrs:{href:"https://github.com/vmx",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/vmx"),a("OutboundLink")],1),e._v("'s "),a("em",[e._v("better way")]),e._v(" might be able to\nmake use of these manifests, I've coded up a quick spike implementation to\nget a feel & see if this is worth discussing further:\nExample Code")]),e._v(" "),a("p",[e._v("https://github.com/qri-io/go-ipld-manifest")]),e._v(" "),a("p",[e._v("There's a test in there that runs some "),a("em",[e._v("extremely")]),e._v(' rough numbers of a\n4-tiered Dag, where the first three tiers are small "link-only nodes" and\nthe bottom ~3k nodes are all 256kb blocks. running that test with go test\n-v:')]),e._v(" "),a("p",[e._v("manifest representing 4043 nodes and 1.024210Gb of content is 253.921997kb as CBOR")]),e._v(" "),a("p",[e._v("So based on this "),a("em",[e._v("very rough")]),e._v(" example, you could get around 1 Gig of\ncontent represented in a single manifest if stored as CBOR. I'm assuming a\nmanifest should fit in a single block for caching purposes, but that may\nnot necessarily be true. To keep the example \"real\" (lol) I've added in a\nlist of block sizes to the manifest. Weather that's acceptable is, well, a\nquestion for y'all. It's worth noting this total-storable figure will drop\nwith the switch to base32 cids.")]),e._v(" "),a("p",[e._v("Pushing this decision to the client was highly problematic, it means the\nclient would have to choose between being either fast/efficient or reliable.")]),e._v(" "),a("p",[e._v("I'm assuming we're operating in a peer-2-peer environment, and having\ntrouble seeing how me (as a peer) having a list of all the blocks I need\nbefore I go get them "),a("em",[e._v("isn't")]),e._v(" worth the trouble. I'm guessing there's\ndetails & a good war story here that I'm having trouble getting to b/c of\nthe client / server terminology. As far as I understand, we're trying to\nfigure out a "),a("em",[e._v("protocol and implementation to retrieve a subgraph of a DAG\nwith providing a CID plus some meta information")]),e._v(", which clearly has a\nconnection to bitswap, the question is where to draw lines between those\nAPIs, and what API GraphSync should expose (which I fully trust @vmx\n"),a("a",{attrs:{href:"https://github.com/vmx",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/vmx"),a("OutboundLink")],1),e._v(" will handle 😉 ). I don't think graph manifests\nsolve this problem. I'm proposing manifests are a missing building block in\nthat process, and that there are other use cases for a graph manifest\noutside of graph sync (the big one being a proper progress indicator).")]),e._v(" "),a("p",[e._v("It means that you either keep a static representation of the graph index\nfor every CID or you do a fairly expensive query over a simpler index every\ntime you generate the manifest.")]),e._v(" "),a("p",[e._v("There's a third option: only keeping manifests of important CIDs. In the\ncommon use cases that means root hashes. No need to keep a manifest of\nevery CID, but being able to generate a manifest of any graph is a useful\nproperty. Manifests of immutable content are also immutable, so caching\nhere is a win, but not vital. Being able to generate manifests as protocol\nlevel would alleviate the need for users to see this stuff, and open the\ndoor to future work with subgraph manifests.")]),e._v(" "),a("p",[e._v("The code example provided isn't usable as a measurement of performance b/c\nit's not doing any real node resolving. If network is involved, yes this\nwill be a "),a("em",[e._v("very")]),e._v(" expensive operation that should be avoided entirely\nIMHO. (@mikeal "),a("a",{attrs:{href:"https://github.com/mikeal",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/mikeal"),a("OutboundLink")],1),e._v(" here I think we're in\nagreement that a peer either having full graph or not is a vital piece of\ninfo for decision making).")]),e._v(" "),a("p",[e._v("If the peer has the full graph locally, calculating a manifest should be\ncheap. How cheap depends on plumbing I'm not super familiar with.\nPerformance could indeed be a reason for not using the concept of a\nmanifest at all, but to me if we can't generate a fast manifest of a\ncomplete graph we have locally, something is wrong.")]),e._v(" "),a("p",[e._v('It may be more flexible to simple be able to say "I contain all the blocks\nin the graph for this CID" or "I don\'t know how much of this graph I have."\nThe client should be able to figure out the best way to prioritize getting\nthe graph based on this information. It can traverse down the graph with a\npeer that has some of the data until it hits a block that peer doesn\'t\nhave. As it makes its way down the graph and has to find new peers in a\nvery large graph it will see more peers that have the entire graph and can\nprioritize those peers.')]),e._v(" "),a("p",[e._v("I have two concerns here:")]),e._v(" "),a("ul",[a("li",[e._v("This conversation is happening over the network. Network is\nexpensive.")]),e._v(" "),a("li",[e._v("The logic that drives this is IMHO, really hard when you put\nmultiple peers speaking concurrently into the mix.")])]),e._v(" "),a("p",[e._v('To me the goal of a graph manifest is to get the client/requesting peer\nout of an information deficit as early as possible in the graph-sync\nprocess, allowing the requester to perform coordination duties, and to be\nable to concoct different strategies for delegating requests to peers in\nparallel. To me those "coordination duties" are where the graph sync work\nstarts. If others can benefit from having manifests (I know we would), then\nI think it\'s a candidate for pushing lower into the stack.')]),e._v(" "),a("p",[e._v("Graph Store: Boolean CID index on top of Block Store.")]),e._v(" "),a("p",[e._v('To me this is, like, super solid, which I interpret as part of the "just\nstore your graph information in a graph database" school of thought. This\nhas been suggested elsewhere (I think @lgierth\n'),a("a",{attrs:{href:"https://github.com/lgierth",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/lgierth"),a("OutboundLink")],1),e._v(" is one of it's proponents). A graph database\n/ index does sound smarter than one-off manifests, but I think even in that\ncontext they can work in tandem: generate a manifest from the graph DB so\nthe requester can update it's knowledge of the merkle forest. Sounds like a\nlot of planning work that's above my pay grade 😉.")]),e._v(" "),a("p",[e._v("—\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\n"),a("a",{attrs:{href:"https://github.com/ipld/specs/pull/66#issuecomment-424453481",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/ipld/specs/pull/66#issuecomment-424453481"),a("OutboundLink")],1),e._v(", or mute\nthe thread\n"),a("a",{attrs:{href:"https://github.com/notifications/unsubscribe-auth/AAAcnUjqrQg4dTaqsV0kxiI09j828Yt3ks5uencUgaJpZM4VRFQD",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/notifications/unsubscribe-auth/AAAcnUjqrQg4dTaqsV0kxiI09j828Yt3ks5uencUgaJpZM4VRFQD"),a("OutboundLink")],1),e._v("\n.")])]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-09-25t18-53-44z-b5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-09-25t18-53-44z-b5"}},[e._v("#")]),e._v(" (2018-09-25T18:53:44Z) b5:")]),e._v(" "),a("blockquote",[a("p",[e._v("what is the advantage of the graph manifest over simply doing a breadth first search over the dag?")])]),e._v(" "),a("p",[e._v("locally or over the network? Locally the advantage is very little if any. To me the advantage shows up over the network, giving a requesting peer a small payload of trustable knowledge of what they're after. I think they'd make a great extension when kicking off a bitswap session. For any DAG with less than some threshold of blocks, a manifest would be overkill, and should be skipped.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-09-25t18-57-46z-whyrusleeping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-09-25t18-57-46z-whyrusleeping"}},[e._v("#")]),e._v(" (2018-09-25T18:57:46Z) whyrusleeping:")]),e._v(" "),a("p",[e._v("@b5 i'm talking about over the network. Say i'm fetching a really large file, If i use a selector to fetch the first three layers of the graph, it should give quite a few hashes to request further, in a trustable way, without being too much data.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-09-25t18-59-06z-whyrusleeping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-09-25t18-59-06z-whyrusleeping"}},[e._v("#")]),e._v(" (2018-09-25T18:59:06Z) whyrusleeping:")]),e._v(" "),a("p",[e._v("Also potentially relevant for some, an issue I wrote up on selectors a while back: https://github.com/ipfs/notes/issues/272#issue-271301069")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-09-25t19-22-16z-b5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-09-25t19-22-16z-b5"}},[e._v("#")]),e._v(" (2018-09-25T19:22:16Z) b5:")]),e._v(" "),a("p",[e._v("@whyrusleeping using the first example from your selector thoughts:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<H>{/a/b/c/d}\n\nReturns the object referenced by d (single object) at the path /a/b/c below H, as well as the merkle proof to H.\n")])])]),a("p",[e._v('One approach would be to optionally return a manifest of H, or at least the hash-of-manifest-of H if the peer has a manifest on offer. Peer could elect to not compute a manifest for a number of reasons, so it should be optional.  In this context, the manifest is the "quite a few hashes to request further" without being too much data. It\'s "trustable" in the DHT sense, where manifests should probs be vetted against multiple responding peers or something.')]),e._v(" "),a("p",[e._v("If you "),a("em",[e._v("do")]),e._v(" end up with a trustable manifest, you can now construct selector-like queries locally & just ask for blocks, because you have the entire graph, just not the content. You don't know which peer has which blocks, but that's less relevant than knowing what blocks you need. Recursive fetching strategies that hone in on outstanding blocks become a thing, which should cut down on complex selector construction & fulfillment, and parallelize across peers better.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-09-25t20-38-31z-mikeal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-09-25t20-38-31z-mikeal"}},[e._v("#")]),e._v(" (2018-09-25T20:38:31Z) mikeal:")]),e._v(" "),a("blockquote",[a("p",[e._v("Datasets like ImageNet have 10^6 entries (image files) in a single directory.")])]),e._v(" "),a("blockquote",[a("p",[e._v('manifest representing 4043 nodes and 1.024210Gb of content is 253.921997kb as CBOR\nwhere the first three tiers are small "link-only nodes" and the bottom ~3k nodes are all 256kb blocks')])]),e._v(" "),a("p",[e._v("Any solution we go with here is going to be more optimized for one case vs another. That said, I don't think that we should be using block sizes as optimal as 250K as our go-to use case. Optimal file chunking for large binary files like media would be based on keyframe windows and with text files we probably want to use a rabin chunker for better updates, which will result in many blocks of a much smaller size.")]),e._v(" "),a("p",[e._v("I think that we need a better idea of what use cases we're trying to optimize for. I can't think of a use case for large structured data where a manifest is not prohibitively expensive. As a general rule, the more structured data is the larger the indexes are, and a manifest is effectively an index.")]),e._v(" "),a("blockquote",[a("p",[e._v("This conversation is happening over the network. Network is expensive.")])]),e._v(" "),a("p",[e._v("Couple notes here. Whether or not a peer has the full graph is a single bit, we could just stick it in the DHT and let the client use it when prioritizing peer selection.")]),e._v(" "),a("p",[e._v("Being that network is expensive, I don't see why we'd want clients to pull down the entire manifest when they may only want a portion of the graph.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-09-25t20-45-53z-ajbouh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-09-25t20-45-53z-ajbouh"}},[e._v("#")]),e._v(" (2018-09-25T20:45:53Z) ajbouh:")]),e._v(" "),a("p",[e._v("You make good points about needing to outline the use cases we're targeting. Let me ask some silly questions:")]),e._v(" "),a("p",[e._v("Without a manifest of some kind, how will someone know what entries they want?")]),e._v(" "),a("p",[e._v("Are we assuming that IPFS should always rely on out of band coordination for distribution of CIDs?")]),e._v(" "),a("p",[e._v("This out of band bit seems like the implicit assumption in most of IPFS's design. I believe it is a source of many surprising (and disappointing) performance characteristics.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-09-25t21-32-12z-mikeal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-09-25t21-32-12z-mikeal"}},[e._v("#")]),e._v(" (2018-09-25T21:32:12Z) mikeal:")]),e._v(" "),a("p",[e._v("Reading through this again and I'm starting to see some big holes in this approach.")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("How does the client parallelize grabbing the graph from multiple peers? If it happens to start requesting a graph from a slow peer it has no way to start grabbing other parts from other peers.")])]),e._v(" "),a("li",[a("p",[e._v("When using selectors, what guarantee do we have that the peer sent us the correct blocks?")])])]),e._v(" "),a("ul",[a("li",[e._v("If I ask a peer for "),a("code",[e._v("CID-1")]),e._v(" + "),a("code",[e._v("/one/two/three")]),e._v(" and it starts returning blocks starting at "),a("code",[e._v("three")]),e._v(" it could literally return me anything it wanted to and I'd have no way to know it was wrong. "),a("strong",[e._v("UPDATED:")]),e._v(" I just saw "),a("code",[e._v("Returns the object referenced by d (single object) at the path /a/b/c below H, as well as the merkle proof to H.")]),e._v(" in the path selector spec which should resolve this particular point.")]),e._v(" "),a("li",[e._v("When requesting sub paths, the peer MUST return the intermediary blocks first so that we can parse them to verify the next blocks are correct, otherwise this is an open flooding attack on the block store.")])]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[e._v('With this approach, the "server" has no way of knowing which blocks the client already has. So in actual "sync" cases we\'re going to be requesting a ton of blocks we already have.')])]),e._v(" "),a("p",[e._v("I don't quite see how we're going to securely and efficiently put this much logic on the \"server\" side of the transaction. It's a nice idea in theory to just have one end of the connection start sending blocks without the need for another request but this opts us out of any opportunity to "),a("strong",[e._v("not")]),e._v(" send blocks one side already has and the client can't really be responsible for parallelizing across multiple peers if it isn't responsible for the traversal of the graph.")]),e._v(" "),a("p",[e._v("Similarly, I don't see how a client could make use of a manifest. There's no guarantee that the peer isn't lying about the manifest, although you could detect inconsistencies as you parse the blocks and go from there. Other peers could make use of a "),a("em",[e._v("client's")]),e._v(" manifest when sending blocks back, but this still isn't sufficient because the client's block store can contain several trees and it could have a sub-tree but be missing the link between that sub-tree and the root of this particular tree, so it wouldn't have appeared in the manifest for that root but was probably in another. This is going to happen a lot in static site deployments, people have lots of similar shared assets across sites and there are changes to those assets in subtrees all the time.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-09-25t21-36-55z-mikeal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-09-25t21-36-55z-mikeal"}},[e._v("#")]),e._v(" (2018-09-25T21:36:55Z) mikeal:")]),e._v(" "),a("p",[e._v("One more thing, can we assume fully duplexed connections are available?")]),e._v(" "),a("p",[e._v("If so, there are ways that we can optimize performance by concurrently asking for blocks rather than trying to come up with ways for one end to send many requested blocks serially.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-09-26t00-54-01z-b5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-09-26t00-54-01z-b5"}},[e._v("#")]),e._v(" (2018-09-26T00:54:01Z) b5:")]),e._v(" "),a("p",[e._v("Ok, might be worth backing up to make this a little clearer with a story. First, the selector conversation is separate from graph manifests. For the sake of argument, let's put selectors aside for a second and walk through an example of how this "),a("em",[e._v("might")]),e._v(" work.")]),e._v(" "),a("p",[e._v("First, I add some content to IPFS, which generates the classic DAG and CID "),a("code",[e._v("A")]),e._v(". The content I've added totals 15MB, which is larger than the threshold for creating a manifest (for example, 10MB), so I create one right here & now, before anyone asks for it. The manifest for a 15MB file clocks in at ~4.4kb. For the sake of using the file system I already have, I add this 4.4Kb manifest back to my local IPFS repo and get the CID "),a("code",[e._v("Amanifest")]),e._v(".")]),e._v(" "),a("p",[e._v("Later on peer Sandra comes along and asks me for the content at CID "),a("code",[e._v("A")]),e._v(". I respond with the first block "),a("code",[e._v("A")]),e._v(", and because I'm nice , I "),a("em",[e._v("also")]),e._v(" populate a field in that message "),a("code",[e._v("manifest")]),e._v(" with "),a("code",[e._v("Amanifest")]),e._v(".")]),e._v(" "),a("p",[e._v("Sandra's been asking a few others for hash of "),a("code",[e._v("A")]),e._v(", and isn't getting back and messages with the "),a("code",[e._v("manifest")]),e._v(" field populated so she can't really trust me. She downloads all of the blocks at CID "),a("code",[e._v("A")]),e._v(" the old fashioned way, but because Sandra is nice, once she has the full, verified DAG, she calculates the manifest of "),a("code",[e._v("A")]),e._v(", gets CID "),a("code",[e._v("Amanifest")]),e._v(" as the result, and knows I'm a bro. If she'd gotten any answer other than "),a("code",[e._v("Amanifest")]),e._v(" she would have put me in the burn book.")]),e._v(" "),a("p",[e._v("Em then connects and asks "),a("em",[e._v("both")]),e._v(" me and Sandra for CID A. This time we both populate the "),a("em",[e._v("manifest")]),e._v(" field with "),a("code",[e._v("Amanifest")]),e._v(", and because this trivial network is set to trust content seen by two peers, Em asks Sandra for the content at "),a("code",[e._v("Amanifest")]),e._v(", and Sandra sends over a 4.5Kb manifest, which Em decodes & runs against the checksum. The manifest passes the integrity check, and Em's satisfied with 2 peers saying the same thing, so Em uses the manifest.")]),e._v(" "),a("p",[e._v("At this point Em has a "),a("em",[e._v("complete")]),e._v(", list of "),a("em",[e._v("every")]),e._v(" block in CID "),a("code",[e._v("A")]),e._v(", the graph, and the size of each block. Em uses this info to do smart things.")]),e._v(" "),a("p",[e._v("Before Em does anything else em does a set intersection between their local blocks and the blocks listed in the manifest. Turns out Em already has 15 of the 70 blocks listed in the manifest, so they can skip asking for those.")]),e._v(" "),a("p",[e._v("Em wants the whole DAG, so they do the easy thing & just cut the remaining list of 55 blocks in half, asking me for one half and Sandra for the other. Sandra's quicker than me and finishes her list first, so Em cuts my remaining list in half and gives the other list of blocks to Sandra again to fulfill, letting my weak-sauce tethered 3G connection close out the 4 blocks I can contribute.")]),e._v(" "),a("p",[e._v("While this is happening Em is seeing a progress bar, because they know exactly how many blocks are left, which they have, and which they need. One day in future versions of IPFS Em might use that information to construct fancy selectors that carve up the manifest, asking for a subgraph of available content. If the manifest came back with, say a larger size than Em's allowed repo, Em may elect to abort the process entirely before asking for more blocks.")]),e._v(" "),a("p",[e._v("While blocks are transmitting Em is doing the usual checking of the blocks coming over the wire. If at any point the blocks Em's requesting aren't adding up to correct hashes, the whole process can be aborted. In this example em's local 15 blocks happen to be a subgraph that adds up to a file "),a("code",[e._v("index.html")]),e._v(", which they already have from another DAG. Em could run quick integrity check on this subgraph, and if it works out, this manifest is even more trustworthy.")]),e._v(" "),a("p",[e._v("Peers are incentivized to not lie about manifests because If a peer "),a("em",[e._v("ever")]),e._v(" transmits a malicious manifest and you acquire the real manifest, you know they're misbehaving, because there's a deterministic algorithm connecting the content to the manifest. Because you can generate the manifest locally once you have the full DAG, you can check for malicious responses after the fact.")]),e._v(" "),a("p",[e._v("Ideally, all of this is pretty low level, and structured as an opt-in speed-up-happy-path, falling back to the way things work today (because it works!).")]),e._v(" "),a("p",[e._v("Finally, it's worth pointing out this approach is chunking-strategy agnostic. Graph manifests will work on any DAG.")]),e._v(" "),a("p",[e._v("To me, selectors enter the conversation "),a("em",[e._v("after")]),e._v(" manifests. Manifests by "),a("em",[e._v("no means")]),e._v(" answer all the questions you would want to ask of a DAG, but a manifest makes constructing those selector queries  simpler and faster. As @vmx mentioned something akin to manifests would be something graph sync builds upon.")]),e._v(" "),a("p",[e._v("I think @ajbouh hit the nail on the head with this:")]),e._v(" "),a("blockquote",[a("p",[e._v("Without a manifest of some kind, how will someone know what entries they want?")])]),e._v(" "),a("p",[e._v("I'd be happy to outline how I plan to use graph manifests out in IPFS userland, but would rather avoid clogging all y'all's inboxes if we don't have clarity on the concept 😄.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-09-26t04-04-21z-whyrusleeping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-09-26t04-04-21z-whyrusleeping"}},[e._v("#")]),e._v(" (2018-09-26T04:04:21Z) whyrusleeping:")]),e._v(" "),a("p",[e._v("@b5 Hrm... I'm still not seeing how much the manifest improves on the situation. For the 15MB file example, you end up with a 1 deep graph, where the root node has links to all the leaf nodes. So the root 'A' of that file contains all the information that the manifest would.")]),e._v(" "),a("p",[e._v("Then, at some point the graph gets too big for the manifest file to be represented as a single object, so you would have to shard it. This runs into the same issue as before...")]),e._v(" "),a("p",[e._v('If I could have a selector that said "Give me all non-leaf nodes in graph A" it would not be too much more data than the proposed manifest, and actually contain data that we need for the graph.')]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-09-27t09-44-53z-mib-kd743naq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-09-27t09-44-53z-mib-kd743naq"}},[e._v("#")]),e._v(" (2018-09-27T09:44:53Z) mib-kd743naq:")]),e._v(" "),a("p",[e._v("@b5 looks interesting, though I can't dig into it in-depth. Could you try to build a manifest over "),a("a",{attrs:{href:"https://ipfs.io/ipfs/zdjA8qkDL6PaMtsVc4mVC32dywWagCynuK3JBVDo6EuuKAGDV",target:"_blank",rel:"noopener noreferrer"}},[e._v("one of my datasets"),a("OutboundLink")],1),e._v(", see how that behaves? ( yes, I still need to clean up the go-ipfs patch to render the metadata locked in this set, $real-world is really messing with my available time )")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-10-22t06-39-55z-daviddias"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-10-22t06-39-55z-daviddias"}},[e._v("#")]),e._v(" (2018-10-22T06:39:55Z) daviddias:")]),e._v(" "),a("p",[e._v("Good to share here a video that just got uploaded, "),a("a",{attrs:{href:"https://youtu.be/tpqXUmokFZ0",target:"_blank",rel:"noopener noreferrer"}},[e._v("Volker's talk on GraphSync from LabDay"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-10-29t11-23-03z-daviddias"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-10-29t11-23-03z-daviddias"}},[e._v("#")]),e._v(" (2018-10-29T11:23:03Z) daviddias:")]),e._v(" "),a("p",[e._v("@jbenet and @whyrusleeping produced a specification for GraphSync and IPLD Selectors during the Go IPFS Hack Week. It contains all the thinking for these two systems from the last 3 years + thinking about this (first record was "),a("a",{attrs:{href:"https://youtu.be/9UjqJTCg_h4?t=1478",target:"_blank",rel:"noopener noreferrer"}},[e._v("Jeromy's Bitswap Talk, circa Dec 2015"),a("OutboundLink")],1),e._v(").")]),e._v(" "),a("p",[e._v("You can watch Juan's presentation on the "),a("a",{attrs:{href:"https://drive.google.com/open?id=1NbbVxZQFKXwW6mdodxgTaftsI8eID-c1",target:"_blank",rel:"noopener noreferrer"}},[e._v("GraphSync and IPLD Selectors Spec here"),a("OutboundLink")],1)]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-10-29t11-29-38z-daviddias"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-10-29t11-29-38z-daviddias"}},[e._v("#")]),e._v(" (2018-10-29T11:29:38Z) daviddias:")]),e._v(" "),a("p",[e._v("@jbenet can you provide the docs produced ASAP? I believe that @vmx and @mikeal are still working on the direction that came out of their recent discussions vs leveraging the spec you produced.")]),e._v(" "),a("p",[e._v("@vmx @mikeal one of the valuable outputs of the discussions in Glasgow, is that independently of who is right when it comes to GraphSync design, any GraphSync design and implementation will have to go through a series of tests/benchmarks with the multiple graph topological. Can you list those here? AFAIK we at least have:")]),e._v(" "),a("ul",[a("li",[e._v("Long linked lists (e.g. Blockchains, CRDT logs, etc)")]),e._v(" "),a("li",[e._v("Gigantic files")]),e._v(" "),a("li",[e._v("Very large sharded directories")]),e._v(" "),a("li",[e._v("Hibrids between sharded directories and gigantic files (e.g. npm, wikipedia, etc)")]),e._v(" "),a("li",[e._v("Fast Video Streaming")])]),e._v(" "),a("p",[e._v("@hannahhoward I believe you are working on benchmarks for a potential GraphSync for go-ipfs, do you have a list of topologies you are about to test for?")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-10-29t13-10-03z-warpfork"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-10-29t13-10-03z-warpfork"}},[e._v("#")]),e._v(" (2018-10-29T13:10:03Z) warpfork:")]),e._v(" "),a("p",[e._v("That latest set of docs for IPLD Selectors should also be linked to on https://github.com/ipfs/notes/issues/272 😃")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-10-30t23-06-41z-mikeal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-10-30t23-06-41z-mikeal"}},[e._v("#")]),e._v(" (2018-10-30T23:06:41Z) mikeal:")]),e._v(" "),a("blockquote",[a("p",[e._v("That latest set of docs for IPLD Selectors should also be linked to on ipfs/notes#272 😃")])]),e._v(" "),a("p",[e._v("Looking at Juan's screen in his talk and nothing in or linked to on this page matches what is up on his screen 😦")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-10-30t23-11-08z-mikeal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-10-30t23-11-08z-mikeal"}},[e._v("#")]),e._v(" (2018-10-30T23:11:08Z) mikeal:")]),e._v(" "),a("blockquote",[a("p",[e._v("That latest set of docs for IPLD Selectors should also be linked to on ipfs/notes#272 😃")])]),e._v(" "),a("p",[e._v("This is a good starter list. Once we have the benchmarks somewhere we can always add data sets, I'd rather just get a few of these going and iterate than try to front-load a ton of work when we're currently operating with zero benchmarks.")]),e._v(" "),a("p",[e._v("The much harder part of this will be multiplying the data sets with peer/network conditions. For each of these data sets we need to benchmark situations in which:")]),e._v(" "),a("ul",[a("li",[e._v("Only one peer has all the data.")]),e._v(" "),a("li",[e._v("Two or more peers have all of the data but variable network conditions.")]),e._v(" "),a("li",[e._v("Two or more peers have parts of the data but none have the whole set.")])]),e._v(" "),a("p",[e._v("The issue with the old design wasn't so much that it didn't work well under a specific data-set but that it completely broke down once you were getting the set from multiple peers.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-10-30t23-41-45z-whyrusleeping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-10-30t23-41-45z-whyrusleeping"}},[e._v("#")]),e._v(" (2018-10-30T23:41:45Z) whyrusleeping:")]),e._v(" "),a("p",[e._v("@mikeal you might be interested in the tests i wrote in go-bitswap recently: https://github.com/ipfs/go-bitswap/pull/8/files")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-10-31t01-35-59z-jbenet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-10-31t01-35-59z-jbenet"}},[e._v("#")]),e._v(" (2018-10-31T01:35:59Z) jbenet:")]),e._v(" "),a("p",[e._v("Hey folks, sorry for delay. I’ll put the docs we made in Glasgow up in the next day")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-11-01t20-48-43z-jbenet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-11-01t20-48-43z-jbenet"}},[e._v("#")]),e._v(" (2018-11-01T20:48:43Z) jbenet:")]),e._v(" "),a("p",[e._v("Here's the selectors part:")]),e._v(" "),a("ul",[a("li",[e._v("https://github.com/ipld/specs/pull/74")]),e._v(" "),a("li",[e._v("https://github.com/ipld/specs/blob/920f671fe388cc401caf32234d2de98eed0cb9b7/selectors/selectors.md")])]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-11-01t21-10-47z-jbenet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-11-01t21-10-47z-jbenet"}},[e._v("#")]),e._v(" (2018-11-01T21:10:47Z) jbenet:")]),e._v(" "),a("ul",[a("li",[e._v('I renamed this PR as "GraphSync (A)".')]),e._v(" "),a("li",[e._v('I PRed up my doc into https://github.com/ipld/specs/pull/75 ("Graphsync (B)")')]),e._v(" "),a("li",[e._v("See it here: https://github.com/ipld/specs/blob/bd841ab2b974f01eee07ed44e31cacdc56e13540/graphsync/graphsync.md")]),e._v(" "),a("li",[e._v("See the video presentation here: https://drive.google.com/file/d/1NbbVxZQFKXwW6mdodxgTaftsI8eID-c1/view")])]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-11-01t21-39-41z-jbenet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-11-01t21-39-41z-jbenet"}},[e._v("#")]),e._v(" (2018-11-01T21:39:41Z) jbenet:")]),e._v(" "),a("p",[e._v("Other notes about the manifests approach discussed here:")]),e._v(" "),a("ul",[a("li",[e._v("this is related to another important problem when working with large graphs & selectors: being able to check membership of an object in a graph or selection of a graph quickly (locally and in a trusted setting). Especially relevant to membership in a union of hundreds/thousands of selectors (eg the pinning or GC use case)")]),e._v(" "),a("li",[e._v("A good, fast, efficient implementation of a local selector based pinner would need some way of traversing the paths and structure of the graph, without having to pull out the data.")]),e._v(" "),a("li",[e._v('I think some graph dbs (probably non-linked data ones) make this kind of "traversal of the links" fast, and also avoid pulling out the data in a node, but not sure.')]),e._v(" "),a("li",[e._v('I think @whyrusleeping is right that for most graphs, the structure (links and paths) will be about as big as "the whole graph minus leaf/terminal nodes"). So the entire approach may not be winning much. It would be good to test/benchmark this assumption with many kinds of real workloads.')])]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("And thoughts on provable versions of these. "),a("strong",[e._v("(not relevant for the short term -- <1yr)")])]),e._v(" "),a("ul",[a("li",[e._v("Transparent proofs that the structure/manifest of a graph corresponds to a graph would be useful. (basically, a way to prove "),a("code",[e._v("structure_of_a = structure(graph_a)")]),e._v(" where "),a("code",[e._v("structure(.)")]),e._v(" pulls out the paths/links and nothing else).")]),e._v(" "),a("li",[e._v('today we use simple merkle proofs because they are the cheapest way in combined "computation + bandwidth" costs. but these can be expensive in bandwidth, so in extremely bandwidth constrained settings (eg filecoin/other blockchains), we use SNARKs which are massively intensive on computation, but drastically reduce bandwidth usage.')]),e._v(" "),a("li",[e._v("I think proofs of this sort would be too exorbitantly expensive for anything outside of a blockchain (merkle membership proofs + all the path checking insanity. not reasonable in either SNARKs, STARKs, or bulletproofs).")]),e._v(" "),a("li",[e._v("BUT. since authenticated data structure checking is so tremendously useful, this may hit hardware in not a long time. It is not insane to think we might see chips dedicated to doing proofs like these in hardware in 10 years, especially if enough value is on the line (eg bitcoin asics, SGX, TEEs, light blockchain clients, etc). crazier stuff is happening in hardware for less value on the line.")]),e._v(" "),a("li",[e._v('following that line of thinking -- in the medium term (1-2yrs) an RFP for "figure out hardware friendly ways to prove membership in a markle dag w/ string paths in the links" might yield results that could be used for the long term (5-10yrs).')])]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-11-01t22-21-48z-b5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-11-01t22-21-48z-b5"}},[e._v("#")]),e._v(" (2018-11-01T22:21:48Z) b5:")]),e._v(" "),a("p",[e._v("Thanks for the info. This is super helpful! The whole reason for making a stink comes from pain points we've uncovered building user experiences on top of IPFS:")]),e._v(" "),a("p",[a("strong",[e._v("I want to show our users meaningful progress bars when fetching a DAG.")])]),e._v(" "),a("p",[e._v("That's it. It's a small point, but an extremely crucial one. Unless I'm missing something, IPFS peers lack the info needed to show how many blocks "),a("em",[e._v("remain")]),e._v(", and that they're arriving in "),a("em",[e._v("parallel")]),e._v(". Not being able to show \"bittorrent style\" progress bars means we can't build UI that shows users one of the greatest upsides of block-based content addressing: when performing a fetch, there's a chance your node already has some/many of the blocks you need. If you happen to be building, say, a version control system, there's a "),a("em",[e._v("very")]),e._v(" high chance you have lots of the necessary blocks already. Nothing else I've seen has this property. It's the detail that made me pick IPFS over dat, and I really want to show it off to the world in a way I think they'll immediately understand.")]),e._v(" "),a("p",[e._v('It\'s absolutely true that most (all?) manifests would be pretty close to the size of "the whole graph minus leaf nodes". The entire manifest is a tax. The advantage of a manifest is not in the size, but in getting a fetching peer out of an information-poor context as soon as possible. The tax should be covered by being able to make smarter choices with that knowledge.')]),e._v(" "),a("p",[e._v("Anyway, I'm just after progress bars. Building this sort of thing in userland is, well, tough.")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("As for Provable versions of manifests, that's well above my pay grade I'll happily leave that to y'all 😉.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-11-01t22-32-30z-whyrusleeping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-11-01t22-32-30z-whyrusleeping"}},[e._v("#")]),e._v(" (2018-11-01T22:32:30Z) whyrusleeping:")]),e._v(" "),a("p",[e._v("@b5 I think we can solve the progress bars problem (especially in your ipld usecase) by adding a small amount of extra metadata in each node that lets us know roughly how many nodes are behind each link. You should actually be able to do this today by simply adding that to your existing datastructures.")]),e._v(" "),a("p",[e._v("Does that seem reasonable? (also, we should open a new issue for 'progress bars on ipld' or something)")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-11-01t22-35-55z-b5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-11-01t22-35-55z-b5"}},[e._v("#")]),e._v(" (2018-11-01T22:35:55Z) b5:")]),e._v(" "),a("p",[e._v("Totally. Apologies all (particularly @vmx), I've hijacked this thread for long enough. I'd be happy to kill the manifest discussion and move the progress-bar chat ~someone~ somewhere else.")]),e._v(" "),a("p",[e._v("Thanks all!")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-11-03t10-16-33z-daviddias"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-11-03t10-16-33z-daviddias"}},[e._v("#")]),e._v(" (2018-11-03T10:16:33Z) daviddias:")]),e._v(" "),a("p",[e._v("Here is a playground for you -- https://github.com/ipfs/interop/pull/44#issuecomment-435576034. Customizable exchange files tests between JS and Go (go<->go, go<->js, js<->js) that test for large files (as large as you want) and directories (as nested as you want). It is pretty easy to try it out with different bundles of go-ipfs and js-ipfs, check the Readme https://github.com/ipfs/interop#run-the-tests")])])}),[],!1,null,null,null);t.default=o.exports}}]);