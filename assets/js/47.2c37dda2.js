(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{315:function(e,t,i){"use strict";i.r(t);var o=i(13),s=Object(o.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("p",[e._v("!!!")]),e._v(" "),i("p",[e._v("This document has "),i("strong",[e._v("moved")]),e._v(".")]),e._v(" "),i("p",[e._v("You'll now find information like this in the "),i("a",{attrs:{href:"https://github.com/ipld/ipld/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ipld/ipld"),i("OutboundLink")],1),e._v(" meta-repo,\nand published to the web at https://ipld.io/ .")]),e._v(" "),i("p",[e._v("All documentation, fixtures, specifications, and web content is now gathered into that repo.\nPlease update your links, and direct new contributions there.")]),e._v(" "),i("p",[e._v("!!!")]),e._v(" "),i("hr"),e._v(" "),i("h1",{attrs:{id:"specification-ipld-composites"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#specification-ipld-composites"}},[e._v("#")]),e._v(" Specification: IPLD Composites")]),e._v(" "),i("p",[i("strong",[e._v("Status: Prescriptive - Exploratory")])]),e._v(" "),i("p",[e._v("Organizing IPLD data into usable, efficient, complex data structures spanning many blocks aimed for use by end-user applications.")]),e._v(" "),i("p",[e._v("This document will re-use some terms found in the "),i("RouterLink",{attrs:{to:"/design/data-model-layer/data-model.html"}},[e._v("IPLD data model")]),e._v(".")],1),e._v(" "),i("p",[e._v("IPLD Composites offer codec agnostic programming interfaces for all common operations users can currently accomplish on Data-Model "),i("RouterLink",{attrs:{to:"/design/data-model-layer/data-model.html#kinds"}},[e._v("“Kinds”")]),e._v(".")],1),e._v(" "),i("p",[e._v("Contents:")]),e._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"#motivation"}},[e._v("Motivation")])]),e._v(" "),i("li",[i("a",{attrs:{href:"#requirements"}},[e._v("Requirements")])]),e._v(" "),i("li",[i("a",{attrs:{href:"#composite-definition"}},[e._v("Composite Definition")])]),e._v(" "),i("li",[i("a",{attrs:{href:"#operations"}},[e._v("Operations")])])]),e._v(" "),i("h2",{attrs:{id:"motivation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),i("p",[e._v("Even before the IPLD Data-Model was formally specified, developers were creating multi-block data-structures with similar semantics to single-block primitives. The most illustrative example of this is the "),i("code",[e._v("dag-pb")]),e._v(" HAMT implementation used by IPFS for large directories.")]),e._v(" "),i("p",[e._v("These early implementations of multi-block data structures exposed several problems.")]),e._v(" "),i("ul",[i("li",[e._v("They are lacking self-description. A consumer of a graph containing these structures needs to have logic on top of IPLD and vary the way it performs operations on these data structures.")]),e._v(" "),i("li",[e._v("Implementations of these data structures cannot perform operations on each other. In other words, multi-block data structures have a hard time building on top of each other.")])]),e._v(" "),i("p",[e._v("Since there wasn’t a standardized way to describe these data structures we couldn’t build libraries for paths and selectors that seamlessly supported them.")]),e._v(" "),i("p",[e._v("As we started designing this system several other requirements surfaced.")]),e._v(" "),i("ul",[i("li",[e._v("Transparent encryption envelopes on the read "),i("strong",[e._v("and")]),e._v(" write.")]),e._v(" "),i("li",[e._v("Advanced "),i("code",[e._v("Link")]),e._v(" types that can support some form of mutability and link to paths within other data structures.")]),e._v(" "),i("li",[e._v("Flexible multi-block binary types.")])]),e._v(" "),i("h2",{attrs:{id:"requirements"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#requirements"}},[e._v("#")]),e._v(" Requirements")]),e._v(" "),i("p",[e._v("IPLD Composites cannot be implemented without:")]),e._v(" "),i("ul",[i("li",[e._v("The IPLD Data-Model. While composites are codec agnostic they do require the full data model be implemented by the codec.")])]),e._v(" "),i("h2",{attrs:{id:"composite-definition"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#composite-definition"}},[e._v("#")]),e._v(" Composite Definition")]),e._v(" "),i("p",[e._v("Composite definitions describe how to find an implementation of the data structure. When encoded into the data these also serve as a the self-description mechanism.")]),e._v(" "),i("p",[e._v('A Composite Definition may be applied in a number of ways, either "out-of-band" by applications or "in-band" using something like the the "Fat Pointers" discussed briefly below.')]),e._v(" "),i("p",[i("em",[i("strong",[e._v("Open Issue: Fat Pointers")])])]),e._v(" "),i("p",[e._v("Early experiments simply reserved the "),i("code",[e._v("_type")]),e._v(" property for composites to describe themselves. Reserving this property by default across any data in any block is highly problematic and makes it impossible to express certain data in IPLD.")]),e._v(" "),i("p",[e._v('What we need in order to move forward to enable some version of "fat pointer" is still under discussion. Some\nextension/modification to '),i("code",[e._v("CID")]),e._v(" in order to signal that “the data being linked to is a composite definition” at\nwhich point we can safely ad semantics to "),i("code",[e._v("_type")]),e._v(" or other properties without reserving any property universally\nwould work but there may be other options we have yet to explore.")]),e._v(" "),i("h3",{attrs:{id:"version-1"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#version-1"}},[e._v("#")]),e._v(" Version 1")]),e._v(" "),i("p",[e._v("The "),i("code",[e._v("_type")]),e._v(" property is a string identifier. This identifier is used to lookup the implementation and if it cannot be found by the host environment any operation is expected to throw an exception. When a Composite Definition is applied, implementations MUST NOT fallback to "),i("em",[e._v("Layer 1")]),e._v(" operations on the contents of the node if they do not have an implementation.")]),e._v(" "),i("p",[e._v("Example:")]),e._v(" "),i("div",{staticClass:"language-json extra-class"},[i("pre",{pre:!0,attrs:{class:"language-json"}},[i("code",[i("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),i("span",{pre:!0,attrs:{class:"token property"}},[e._v('"_type"')]),i("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),i("span",{pre:!0,attrs:{class:"token string"}},[e._v('"IPLD/Experimental/HAMT/0"')]),e._v(" "),i("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),i("h3",{attrs:{id:"version-2"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#version-2"}},[e._v("#")]),e._v(" Version 2")]),e._v(" "),i("p",[e._v("The "),i("code",[e._v("_type")]),e._v(" property is a "),i("code",[e._v("Map")]),e._v(".")]),e._v(" "),i("p",[e._v("The map must contain the following properties.")]),e._v(" "),i("ul",[i("li",[i("code",[e._v("name")]),e._v(" must be a string identifier.")]),e._v(" "),i("li",[i("code",[e._v("engine")]),e._v(" must be one of the following:\n"),i("ul",[i("li",[i("code",[e._v("”IPLD/Engine/WASM/0”")])])])])]),e._v(" "),i("p",[e._v("Each additional property describes the implementation of every operation.")]),e._v(" "),i("p",[i("em",[e._v("TODO: define structure of pointers to WASM functions")])])])}),[],!1,null,null,null);t.default=s.exports}}]);