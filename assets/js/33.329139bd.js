(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{301:function(e,t,s){"use strict";s.r(t);var n=s(13),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("!!!")]),e._v(" "),s("p",[e._v("This document has "),s("strong",[e._v("moved")]),e._v(".")]),e._v(" "),s("p",[e._v("You'll now find information like this in the "),s("a",{attrs:{href:"https://github.com/ipld/ipld/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ipld/ipld"),s("OutboundLink")],1),e._v(" meta-repo,\nand published to the web at https://ipld.io/ .")]),e._v(" "),s("p",[e._v("All documentation, fixtures, specifications, and web content is now gathered into that repo.\nPlease update your links, and direct new contributions there.")]),e._v(" "),s("p",[e._v("!!!")]),e._v(" "),s("hr"),e._v(" "),s("h1",{attrs:{id:"ethereum-chain-data-structures"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ethereum-chain-data-structures"}},[e._v("#")]),e._v(" Ethereum Chain Data Structures")]),e._v(" "),s("p",[e._v("This section contains the IPLD schemas for the blockchain data structures of Ethereum.\nThis includes: headers, uncle sets, transactions, and receipts. The state trie, storage trie,\nreceipt trie, and transaction trie IPLDs are described in the "),s("RouterLink",{attrs:{to:"/data-structures/ethereum/state.html"}},[e._v("state")]),e._v(" section. It\nis important to note that traversal from header to a specific transaction or receipt requires traversal\nacross their respective tries beginning at the root referenced in the header. Alternatively, uncles are referenced\ndirectly from the header by the hash of the RLP encoded list of uncles.")],1),e._v(" "),s("h2",{attrs:{id:"header-ipld"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#header-ipld"}},[e._v("#")]),e._v(" Header IPLD")]),e._v(" "),s("p",[e._v("This is the IPLD schema for a canonical Ethereum block header.")]),e._v(" "),s("ul",[s("li",[e._v("The IPLD block is the RLP encoded header")]),e._v(" "),s("li",[e._v("Links to headers use a KECCAK_256 mutlihash of the RLP encoded header and the EthHeader codec (0x90).")]),e._v(" "),s("li",[e._v("Parent headers are referenced back to by their child header.")]),e._v(" "),s("li",[e._v("The genesis header is unique in that it does not reference a parent header in "),s("code",[e._v("ParentCID")]),e._v(", instead it contains a reference to a "),s("code",[e._v("GenesisInfo")]),e._v(" ADL.")])]),e._v(" "),s("div",{staticClass:"language-ipldsch extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ipldsch"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Header contains the consensus fields of an Ethereum block header")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token typedef"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Header")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("struct")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# CID link to the parent header")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This CID is composed of the KECCAK_256 multihash of the linked RLP encoded header and the EthHeader codec (0x90)")]),e._v("\n    ParentCID "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("&")]),e._v("Header\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# CID link to the list of uncles at this block")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This CID is composed of the KECCAK_256 multihash of the RLP encoded list of Uncles and the EthHeaderList codec (0x91)")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note that an uncle is simply a header that does not have an associated body")]),e._v("\n    UnclesCID "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("&")]),e._v("Uncles\n    Coinbase Address\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# CID link to the root node of the state trie")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This CID is composed of the KECCAK_256 multhash of the RLP encoded state trie root node and the EthStateTrie codec (0x96)")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This steps us down into the state trie, from which we can link to the rest of the state trie nodes and all the linked storage tries")]),e._v("\n    StateRootCID "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("&")]),e._v("StateTrieNode\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# CID link to the root node of the transaction trie")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This CID is composed of the KECCAK_256 multihash of the RLP encoded tx trie root node and the EthTxReceiptTrie codec (0x92)")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This steps us down into the transaction trie, from which we can link to the rest of the tx trie nodes and all of the linked transactions")]),e._v("\n    TxRootCID "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("&")]),e._v("TxTrieNode\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# CID link to the root of the receipt trie")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This CID is composed of the KECCAK_256 multihash of the RLP encoded rct trie root node and the EthTxReceiptTrie codec (0x94)")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This steps us down into the receipt trie, from which we can link to the rest of the rct trie nodes and all of the linked receipts")]),e._v("\n    RctRootCID "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("&")]),e._v("RctTrieNode\n\n    Bloom Bloom\n    Difficulty BigInt\n    Number BigInt\n    GasLimit Uint\n    GasUser Uint\n    Time Uint\n    Extra Bytes\n    MixDigest Hash\n    Nonce BlockNonce\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("h2",{attrs:{id:"uncles-ipld"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#uncles-ipld"}},[e._v("#")]),e._v(" Uncles IPLD")]),e._v(" "),s("p",[e._v("This is the IPLD schema for a list of uncles ordered in ascending order by their block number.")]),e._v(" "),s("ul",[s("li",[e._v("The IPLD block is the RLP encoded list of uncles")]),e._v(" "),s("li",[e._v("CID links to "),s("code",[e._v("UncleList")]),e._v(" use a KECCAK_256 multihash of the RLP encoded list and the EthHeaderList codec (0x92).")]),e._v(" "),s("li",[e._v("The "),s("code",[e._v("Uncles")]),e._v(" is referenced in an Ethereum "),s("code",[e._v("Header")]),e._v(" by the "),s("code",[e._v("UnclesCID")]),e._v(".")])]),e._v(" "),s("div",{staticClass:"language-ipldsch extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ipldsch"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Uncles contains an ordered list of Ethereum uncles (headers that have no associated body)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This IPLD object is referenced by a CID composed of the KECCAK_256 multihash of the RLP encoded list and the EthHeaderList codec (0x91)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token typedef"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Uncles")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Header"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),s("h2",{attrs:{id:"transaction-ipld"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#transaction-ipld"}},[e._v("#")]),e._v(" Transaction IPLD")]),e._v(" "),s("p",[e._v("This is the IPLD schema for a canonical Ethereum transaction. It contains only the fields required for consensus.\nNote that this will need to be updated once EIP-1559 and EIP-2718 are approved.")]),e._v(" "),s("ul",[s("li",[e._v("The IPLD block is the RLP encoded transaction")]),e._v(" "),s("li",[e._v("CID links to "),s("code",[e._v("Transaction")]),e._v(" use a KECCAK_256 multihash of the RLP encoded transaction and the EthTx codec (0x93).")]),e._v(" "),s("li",[s("code",[e._v("Transaction")]),e._v(" IPLDs are not referenced directly from an "),s("code",[e._v("Ethereum")]),e._v(" header but are instead linked to from within the transaction trie whose root is referenced in the "),s("code",[e._v("Header")]),e._v(" by the "),s("code",[e._v("TxRootCID")]),e._v(".")])]),e._v(" "),s("div",{staticClass:"language-ipldsch extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ipldsch"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Transaction contains the consensus fields of an Ethereum transaction")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token typedef"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Transaction")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("struct")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    AccountNonce Uint\n    Price        BigInt\n    GasLimit     Uint\n    Recipient    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("nullable")]),e._v(" Address "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# null recipient means the tx is a contract creation")]),e._v("\n    Amount       BigInt\n    Payload      Bytes\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Signature values")]),e._v("\n    V            BigInt\n    R            BigInt\n    S            BigInt\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("h2",{attrs:{id:"receipt-ipld"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#receipt-ipld"}},[e._v("#")]),e._v(" Receipt IPLD")]),e._v(" "),s("p",[e._v("This is the IPLD schema for a canonical Ethereum receipt. It contains only the fields required for consensus.")]),e._v(" "),s("ul",[s("li",[e._v("The IPLD block is the RLP encoded receipt")]),e._v(" "),s("li",[e._v("CID links to "),s("code",[e._v("Receipt")]),e._v(" use a KECCAK_256 multihash of the RLP encoded receipt and the EthTxReceipt codec (0x95).")]),e._v(" "),s("li",[s("code",[e._v("Receipt")]),e._v(" IPLDs are not referenced directly from an "),s("code",[e._v("Ethereum")]),e._v(" header but are instead linked to from within the receipt trie whose root is referenced in the "),s("code",[e._v("Header")]),e._v(" by the "),s("code",[e._v("RctRootCID")]),e._v(".")])]),e._v(" "),s("div",{staticClass:"language-ipldsch extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ipldsch"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Receipt contains the consensus fields of an Ethereum receipt")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token typedef"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Receipt")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("struct")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    PostStateOrStatus Bytes\n    CumulativeGasUsed Uint\n    Bloom             Bloom\n    Logs              "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Log contains the consensus fields of an Etherem receipt log")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token typedef"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Log")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("struct")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    Address Address\n    Topics  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n    Data    Bytes\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);