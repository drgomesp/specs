(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{324:function(e,t,a){"use strict";a.r(t);var s=a(13),o=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("!!!")]),e._v(" "),a("p",[e._v("This document has "),a("strong",[e._v("moved")]),e._v(".")]),e._v(" "),a("p",[e._v("You'll now find information like this in the "),a("a",{attrs:{href:"https://github.com/ipld/ipld/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ipld/ipld"),a("OutboundLink")],1),e._v(" meta-repo,\nand published to the web at https://ipld.io/ .")]),e._v(" "),a("p",[e._v("All documentation, fixtures, specifications, and web content is now gathered into that repo.\nPlease update your links, and direct new contributions there.")]),e._v(" "),a("p",[e._v("!!!")]),e._v(" "),a("hr"),e._v(" "),a("h1",{attrs:{id:"graphsync"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#graphsync"}},[e._v("#")]),e._v(" Graphsync")]),e._v(" "),a("p",[e._v("This is yet another attempt for a Graphsync design.")]),e._v(" "),a("h2",{attrs:{id:"glossary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#glossary"}},[e._v("#")]),e._v(" Glossary")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("CID")]),e._v(": Hash based content identifier ("),a("a",{attrs:{href:"https://github.com/ipld/specs/blob/master/CID.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("CID specification"),a("OutboundLink")],1),e._v(").")]),e._v(" "),a("li",[a("strong",[e._v("Block")]),e._v(": A CID together with the corresponding binary data ("),a("a",{attrs:{href:"https://github.com/ipld/specs/blob/master/README.md#block",target:"_blank",rel:"noopener noreferrer"}},[e._v("Block specification"),a("OutboundLink")],1),e._v(").")]),e._v(" "),a("li",[a("strong",[e._v("DAG")]),e._v(": Directed acyclic graph, the data structure IPLD can model.")]),e._v(" "),a("li",[a("strong",[e._v("IPLD Path")]),e._v(": A string identifier used for deep references into IPLD graphs ("),a("a",{attrs:{href:"https://github.com/ipld/specs/blob/master/IPLD-Path.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("IPLD Path specification"),a("OutboundLink")],1),e._v(").")]),e._v(" "),a("li",[a("strong",[e._v("Merkle Proof")]),e._v(": Proofing consistency without the need to have all data.")])]),e._v(" "),a("h2",{attrs:{id:"intro"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#intro"}},[e._v("#")]),e._v(" Intro")]),e._v(" "),a("h3",{attrs:{id:"goals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#goals"}},[e._v("#")]),e._v(" Goals")]),e._v(" "),a("ol",[a("li",[e._v("Easy to reason about.")]),e._v(" "),a("li",[e._v("Straightforward to implement.")]),e._v(" "),a("li",[e._v("Flexible for further optimisations.")]),e._v(" "),a("li",[e._v("Fast enough.")])]),e._v(" "),a("h3",{attrs:{id:"scope"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scope"}},[e._v("#")]),e._v(" Scope")]),e._v(" "),a("p",[e._v("A peer has only a subset of a DAG locally available and wants to fill the gaps with data from another peer.")]),e._v(" "),a("h3",{attrs:{id:"out-of-scope"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#out-of-scope"}},[e._v("#")]),e._v(" Out of Scope")]),e._v(" "),a("ul",[a("li",[e._v("Sophisticated IPLD Selectors.")]),e._v(" "),a("li",[e._v("Connection management with several peers. This specification only talks about a one-to-one relationship between two peers.")])]),e._v(" "),a("h2",{attrs:{id:"api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[e._v("#")]),e._v(" API")]),e._v(" "),a("p",[e._v("This section is about the API on a semantic level. It is not about the encoding or the transport over the network.")]),e._v(" "),a("p",[e._v("For the examples the same sample data will be used. CIDs are hard to read and easy to get wrong, hence this example is using "),a("code",[e._v("CID:some-identifier")]),e._v(" to represent CIDs.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("CID:universe\n{\n  type: 'universe',\n  galaxy: CID:milkyway\n}\n\nCID:milkyway\n{\n  type: 'galaxy',\n  name: 'Milky Way',\n  solarSystem: CID:solar-system\n}\n\nCID:solar-system\n{\n  type: 'solar-system',\n  name: 'Solar System',\n  planets: {\n    earth: CID:earth,\n    mars: CID:mars,\n    venus: CID:venus\n  }\n}\n\nCID:earth\n{\n  type: 'planet'\n  name: 'Earth'\n  moon: CID:moon\n}\n\nCID:moon\n{\n  type: 'moon',\n  name: 'Moon'\n}\n\nCID:mars\n{\n  type: 'planet'\n  name: 'Mars'\n}\n\nCID:venus\n{\n  type: 'planet'\n  name: 'Venus'\n}\n")])])]),a("h3",{attrs:{id:"get-all-blocks-along-a-path"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-blocks-along-a-path"}},[e._v("#")]),e._v(" Get all Blocks along a path")]),e._v(" "),a("p",[e._v("This request contains a CID and an IPLD Path that should be traversed. This path will be fully resolved (if possible) and hence traverse several Blocks. All Blocks touched during the traversal are returned in the same order as they were accessed.")]),e._v(" "),a("p",[e._v("If a path can’t be fully resolved as a Block is not available locally, an error is returned containing the CID of the Block that is missing. If a patch contains a field that doesn’t exist, an error containing the part of the path that can’t be resolved is returned.")]),e._v(" "),a("h4",{attrs:{id:"example-usual-case"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-usual-case"}},[e._v("#")]),e._v(" Example usual case")]),e._v(" "),a("p",[e._v("Now we are interested in the "),a("code",[e._v("earth")]),e._v(" and we know how to get the from the "),a("code",[e._v("CID:universe")]),e._v(". The IPLD Path is "),a("code",[e._v("/galaxy/solarSystem/planets/earth")]),e._v(".")]),e._v(" "),a("p",[e._v("The payload of the request:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("CID:universe\n/galaxy/solarSystem/planets/earth\n")])])]),a("p",[e._v("The response contains the full Blocks:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[\n  CID:universe {…},\n  CID:milkyway {…},\n  CID:solar-system {…},\n  CID:earth {…}\n]\n")])])]),a("p",[e._v("The response is not only the "),a("code",[e._v("earth")]),e._v(" Block we are interested in, but also all Blocks up to "),a("code",[e._v("CID:universe")]),e._v(" where we started. This is needed if the result should be verified via a Merkle Proof.")]),e._v(" "),a("h4",{attrs:{id:"example-error-case-not-found"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-error-case-not-found"}},[e._v("#")]),e._v(" Example error case: not found")]),e._v(" "),a("p",[e._v("Imagine the Block for "),a("code",[e._v("CID:solar-system")]),e._v(" is not locally available. The request")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("CID:universe\n/galaxy/solarSystem/planets/earth\n")])])]),a("p",[e._v("would then return all the Blocks, up to the one which can’t be found")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[\n  CID:universe {…},\n  CID:milkyway {…},\n  NotFound CID:solar-system\n]\n")])])]),a("h4",{attrs:{id:"example-error-case-cannot-resolve"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-error-case-cannot-resolve"}},[e._v("#")]),e._v(" Example error case: cannot resolve")]),e._v(" "),a("p",[e._v("The path might point to a field that doesn’t exist. The data is traversed up to the path that can’t be resolved.")]),e._v(" "),a("p",[e._v("Request payload:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("CID:universe\n/galaxy/solarSystem/asteroids/eros\n")])])]),a("p",[e._v("Response:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[\n  CID:universe {…},\n  CID:milkyway {…},\n  CID:solar-system {…},\n  CannotResolve /asteroids/eros\n]\n")])])]),a("p",[e._v("The means that "),a("code",[e._v("CID:solar-system")]),e._v(" doesn’t have a field called "),a("code",[e._v("asteroids")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"get-multiple-blocks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-multiple-blocks"}},[e._v("#")]),e._v(" Get multiple Blocks")]),e._v(" "),a("p",[e._v("When traversing a large DAGs, e.g. full sub-graphs it is more efficient to request several Blocks at once instead of doing one at a time. The Blocks of the response have the same order as they was requested in. If a Block can’t be found it is indicated in the response.")]),e._v(" "),a("h4",{attrs:{id:"example-usual-case-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-usual-case-2"}},[e._v("#")]),e._v(" Example usual case")]),e._v(" "),a("p",[e._v("Let’s say we know the Block of "),a("code",[e._v("CID:solar-system")]),e._v(" locally available. It can now be inspected to get the CIDs of Earth, Mars and Venus. We request those at once.")]),e._v(" "),a("p",[e._v("The payload of the request is:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[\n  CID:earth,\n  CID:mars,\n  CID:venus\n]\n")])])]),a("p",[e._v("The response contains the full Blocks (CID + data):")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[\n  CID:eart {…},\n  CID:mars {…},\n  CID:venus {…}\n]\n")])])]),a("h4",{attrs:{id:"example-error-case-not-found-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-error-case-not-found-2"}},[e._v("#")]),e._v(" Example error case: not found")]),e._v(" "),a("p",[e._v("Request several Blocks, but some of them are not locally available.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[\n  CID:earth,\n  CID:mars,\n  CID:jupiter,\n  CID:venus\n]\n")])])]),a("p",[e._v("The response will contain the CIDs of the Blocks that can’t be found.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[\n  CID:eart {…},\n  CID:mars {…},\n  NotFound: CID:jupiter,\n  CID:venus {…}\n]\n")])])]),a("h3",{attrs:{id:"network-transport"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#network-transport"}},[e._v("#")]),e._v(" Network Transport")]),e._v(" "),a("p",[e._v("The API uses simple request-response semantics. The communication happens in a 1:1 relationship between peers. Requests won’t be handed off to other peers. In case a peer can’t fulfil the request it will return an error.")]),e._v(" "),a("p",[e._v("The responses don’t necessarily need to be sent as one message over the wire. Each Block can be send separately. This makes processing possible while the request is still ongoing. A future improvement may be a way to cancel a response before all data was sent/retrieved. When no further items will be send, a “done with sending messages” message is sent.")]),e._v(" "),a("h3",{attrs:{id:"encoding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#encoding"}},[e._v("#")]),e._v(" Encoding")]),e._v(" "),a("p",[e._v("As IPFS does already widely use Protocol Buffers to encode data, it makes sense to follow that route. This section provides a possible schema of the requests and responses.")]),e._v(" "),a("p",[e._v("The requests are different, the response messages have the same schema.")]),e._v(" "),a("h4",{attrs:{id:"response-message"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#response-message"}},[e._v("#")]),e._v(" Response message")]),e._v(" "),a("div",{staticClass:"language-proto extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('syntax = "proto3";\n\nmessage Response {\n  enum Status {\n    OK = 0\n    INTERNAL_ERROR = 1;\n    NOT_FOUND = 2;\n    CANNOT_RESOLVE = 3;\n  }\n  Status status = 1;\n  bytes cid = 2\n  bytes data = 3;\n}\n')])])]),a("p",[e._v("The "),a("code",[e._v("data")]),e._v(" field depends on the "),a("code",[e._v("status")]),e._v(" as well as on the original request, hence the details are outlined in the individual request sections.")]),e._v(" "),a("p",[e._v("To indicate that no further responses will be sent a message with empty "),a("code",[e._v("cid")]),e._v(" and "),a("code",[e._v("data")]),e._v(" fields is sent. This way no internal state needs to be kept on how many messages were received, you can just wait for this “no further data” message.")]),e._v(" "),a("h4",{attrs:{id:"get-all-blocks-along-a-path-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-blocks-along-a-path-2"}},[e._v("#")]),e._v(" Get all Blocks along a path")]),e._v(" "),a("p",[e._v("The request:")]),e._v(" "),a("div",{staticClass:"language-proto extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('syntax = "proto3";\n\nmessage RequestPath {\n  bytes cid = 1;\n  string path = 2;\n}\n')])])]),a("p",[e._v("Overview of the value of "),a("code",[e._v("data")]),e._v(" in the response messages:")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("status")]),e._v(" "),a("th",[e._v("data")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("OK")]),e._v(" "),a("td",[e._v("The binary data that corresponds to the CID")])]),e._v(" "),a("tr",[a("td",[e._v("INTERNAL_ERROR")]),e._v(" "),a("td",[e._v("Some information about that error")])]),e._v(" "),a("tr",[a("td",[e._v("NOT_FOUND")]),e._v(" "),a("td",[e._v("empty")])]),e._v(" "),a("tr",[a("td",[e._v("CANNOT_RESOLVE")]),e._v(" "),a("td",[e._v("The path of the IPLD Path the cannot be resolved")])])])]),e._v(" "),a("h4",{attrs:{id:"get-multiple-blocks-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-multiple-blocks-2"}},[e._v("#")]),e._v(" Get multiple Blocks")]),e._v(" "),a("p",[e._v("The request:")]),e._v(" "),a("div",{staticClass:"language-proto extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('syntax = "proto3";\n\nmessage RequestBlocks {\n  repeated bytes cids = 1;\n}\n')])])]),a("p",[e._v("Overview of the value of "),a("code",[e._v("data")]),e._v(" in the response messages:")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("status")]),e._v(" "),a("th",[e._v("data")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("OK")]),e._v(" "),a("td",[e._v("The binary data that corresponds to the CID")])]),e._v(" "),a("tr",[a("td",[e._v("INTERNAL_ERROR")]),e._v(" "),a("td",[e._v("Some information about that error")])]),e._v(" "),a("tr",[a("td",[e._v("NOT_FOUND")]),e._v(" "),a("td",[e._v("empty")])])])]),e._v(" "),a("h2",{attrs:{id:"comments-on-this-pr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comments-on-this-pr"}},[e._v("#")]),e._v(" Comments on this PR")]),e._v(" "),a("p",[e._v("This document was originally "),a("a",{attrs:{href:"https://github.com/ipld/specs/pull/78",target:"_blank",rel:"noopener noreferrer"}},[e._v("PR-78"),a("OutboundLink")],1),e._v(". It spawned a lively discussion. This discussion is preserved here for completeness.")]),e._v(" "),a("h3",{attrs:{id:"_78-proposal-graphsync-c-open"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_78-proposal-graphsync-c-open"}},[e._v("#")]),e._v(" #78: Proposal: Graphsync (C) (open)")]),e._v(" "),a("p",[e._v("Opened 2018-11-09T11:52:45Z by vmx")]),e._v(" "),a("p",[e._v("This proposal tries to keep things focued only on getting locally missing nodes from a single remote peer.")]),e._v(" "),a("p",[e._v("This proposal is a new version of the "),a("a",{attrs:{href:"https://github.com/ipld/specs/pull/66",target:"_blank",rel:"noopener noreferrer"}},[e._v("Graphsync (A) proposal"),a("OutboundLink")],1),e._v(", but is also quite similar to the "),a("a",{attrs:{href:"https://github.com/ipld/specs/pull/75",target:"_blank",rel:"noopener noreferrer"}},[e._v("Graphsync (B) proposal"),a("OutboundLink")],1),e._v(", but requires less powerful IPLD Selectors.")]),e._v(" "),a("p",[e._v("One fundamental different between Juan's and my view is: For me IPLD Selectors are a layer on top and run only on a local peer (as described in Graphsync (A)). Graphsync makes sure that all the nodes needed for such a IPLD Selector traversal are locally available. IPLD Selectors are not sent across the network.")]),e._v(" "),a("p",[e._v("Though you could argue that my two request types are already IPLD Selectors the way they are described in Graphsync (B).")]),e._v(" "),a("p",[e._v("The encoding is heavily inspired by the memcache binary protocol.")]),e._v(" "),a("p",[e._v("/cc @b5 @jbenet @diasdavid @mib-kd743naq @mikeal @Stebalien @whyrusleeping")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-11-09t11-52-48z-assigned-to-vmx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-11-09t11-52-48z-assigned-to-vmx"}},[e._v("#")]),e._v(" (2018-11-09T11:52:48Z) Assigned to vmx")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-11-09t11-52-48z-labeled-awaiting-review"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-11-09t11-52-48z-labeled-awaiting-review"}},[e._v("#")]),e._v(' (2018-11-09T11:52:48Z) Labeled "awaiting review"')]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-11-09t11-52-48z-labeled-in-progress"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-11-09t11-52-48z-labeled-in-progress"}},[e._v("#")]),e._v(' (2018-11-09T11:52:48Z) Labeled "in progress"')]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-11-09t19-43-50z-stebalien"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-11-09t19-43-50z-stebalien"}},[e._v("#")]),e._v(" (2018-11-09T19:43:50Z) Stebalien:")]),e._v(" "),a("blockquote",[a("p",[e._v("IPLD Selectors are not sent across the network.")])]),e._v(" "),a("p",[e._v("Being able to send a succinct description of the blocks we'd like across the network is the "),a("em",[e._v("primary")]),e._v(" motivation for graph sync. Without that, it's just bitswap with a better driver (which will get us quite far but that's "),a("em",[e._v("not")]),e._v(" graphsync).")]),e._v(" "),a("p",[e._v("(Also, a path "),a("em",[e._v("is")]),e._v(" a selector so this proposal does send selectors, it just limits them to exactly two types of selectors).")]),e._v(" "),a("p",[e._v("This really needs to start with a motivation. That is, what's the concrete problem graphsync is trying to solve. From my perspective, there are two:")]),e._v(" "),a("ol",[a("li",[e._v("Latency. If I have to get the root, then the children, etc., It'll be at least one round trip before I can get the first block of a file. With balanced files, it'll take several round-trips.")]),e._v(" "),a("li",[e._v("Bandwidth. By its nature, upload bandwidth in bitswap is proportional to download bandwidth.")])]),e._v(" "),a("p",[e._v("(Additionally, we'd "),a("em",[e._v("like")]),e._v(" (optional) negative acknowledgements. In bitswap, there's no way to know if a peer definitely doesn't have something which means we usually just wait a bit and then move on.)")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-11-09t20-26-15z-mikeal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-11-09t20-26-15z-mikeal"}},[e._v("#")]),e._v(" (2018-11-09T20:26:15Z) mikeal:")]),e._v(" "),a("p",[e._v('@stebalien RE: "IPLD Selectors are not sent across the network."')]),e._v(" "),a("p",[e._v("If you'd like us to go into a long motivation exercise again (we did this\nat Lab Week) about "),a("em",[e._v("not")]),e._v(" including them then I would first like to see a\nsimilar motivation document for "),a("em",[e._v("requiring")]),e._v(" them.")]),e._v(" "),a("p",[e._v("I've noted in several threads including both prior GraphSync proposals that\nthis is a highly problematic solution. We also reached a consensus on not\nincluding them at Lab Week.")]),e._v(" "),a("p",[e._v("Requesting an indefinite number of blocks by selector over the network only\nworks well for a single replication use case: where the client can only\npull the graph from a single peer and the client has none of the graph in\ncache.")]),e._v(" "),a("p",[e._v("The method makes parallelizing the replication very difficult and makes\nchecking for existing parts of the graph in a local cache effectively\nimpossible.")]),e._v(" "),a("p",[e._v("The biggest issue it would solve is resolved by this proposal (requesting a\nmerkle proof for a path). Avoiding round trips inside the section of the\ngraph you are requesting stops being much of a performance concern once the\nconnection is saturated (new requests for blocks will arrive long before\nthey can be sent). Given that this is only a concern for large graphs where\nwe should assume we will saturate the connection to the peer what is the\nmotivation for sacrificing the ability to request from other peers in order\nto avoid these roundtrips?")]),e._v(" "),a("p",[e._v("Related: I'm working on a new repo with a large test harness for similating\nreplication conditions so that future conversations about replication can\nbe a bit more grounded.")]),e._v(" "),a("p",[e._v("On Fri, Nov 9, 2018, 11:43 AM Steven Allen <notifications@github.com wrote:")]),e._v(" "),a("blockquote",[a("p",[e._v("IPLD Selectors are not sent across the network.")]),e._v(" "),a("p",[e._v("Being able to send a succinct description of the blocks we'd like across\nthe network is the "),a("em",[e._v("primary")]),e._v(" motivation for graph sync. Without that,\nit's just bitswap with a better driver (which will get us quite far but\nthat's "),a("em",[e._v("not")]),e._v(" graphsync).")]),e._v(" "),a("p",[e._v("(Also, a path "),a("em",[e._v("is")]),e._v(" a selector so this proposal does send selectors, it\njust limits them to exactly two types of selectors).")]),e._v(" "),a("p",[e._v("This really needs to start with a motivation. That is, what's the concrete\nproblem graphsync is trying to solve. From my perspective, there are two:")]),e._v(" "),a("ol",[a("li",[e._v("Latency. If I have to get the root, then the children, etc., It'll\nbe at least one round trip before I can get the first block of a file. With\nbalanced files, it'll take several round-trips.")]),e._v(" "),a("li",[e._v("Bandwidth. By its nature, upload bandwidth in bitswap is\nproportional to download bandwidth.")])]),e._v(" "),a("p",[e._v("(Additionally, we'd "),a("em",[e._v("like")]),e._v(" (optional) negative acknowledgements. In\nbitswap, there's no way to know if a peer definitely doesn't have something\nwhich means we usually just wait a bit and then move on.)")]),e._v(" "),a("p",[e._v("—\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\n"),a("a",{attrs:{href:"https://github.com/ipld/specs/pull/78#issuecomment-437473520",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/ipld/specs/pull/78#issuecomment-437473520"),a("OutboundLink")],1),e._v(", or mute\nthe thread\n"),a("a",{attrs:{href:"https://github.com/notifications/unsubscribe-auth/AAACQ7ced5KDXA0-O9N2MY71D1T05W12ks5utdr3gaJpZM4YWcr9",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/notifications/unsubscribe-auth/AAACQ7ced5KDXA0-O9N2MY71D1T05W12ks5utdr3gaJpZM4YWcr9"),a("OutboundLink")],1),e._v("\n.")])]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-11-09t21-18-52z-stebalien"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-11-09t21-18-52z-stebalien"}},[e._v("#")]),e._v(" (2018-11-09T21:18:52Z) Stebalien:")]),e._v(" "),a("blockquote",[a("p",[e._v("We also reached a consensus on not including them at Lab Week.")])]),e._v(" "),a("p",[e._v('Who\'s "we". I thought "we" had already reached consensus that we '),a("em",[e._v("did")]),e._v(" need them. They're quite literally the entire point of graphsync.")]),e._v(" "),a("blockquote",[a("p",[e._v("The method makes parallelizing the replication very difficult and makes checking for existing parts of the graph in a local cache effectively impossible.")])]),e._v(" "),a("p",[e._v("Usually, sending a few extra blocks won't be a problem. As long as the receiver can tell the sender to "),a("em",[e._v("stop")]),e._v(" sending some sub-dag, we should be fine.")]),e._v(" "),a("p",[e._v("You can also improve this with better traversal orders. For example, a sender can send node A's siblings before sending node A's children, giving the receiver time to receive, parse, and potentially "),a("em",[e._v("cancel")]),e._v(" some of node A's children before they're sent.")]),e._v(" "),a("blockquote",[a("p",[e._v("The biggest issue it would solve is resolved by this proposal (requesting a merkle proof for a path).")])]),e._v(" "),a("blockquote",[a("p",[e._v("Given that this is only a concern for large graphs where we should assume we will saturate the connection to the peer what is the motivation for sacrificing the ability to request from other peers in order to avoid these roundtrips?")])]),e._v(" "),a("p",[e._v("Not necessarily. For example, this version doesn't provide an efficient way to sync a blockchain. Upload bandwidth will also be a bit of a problem for large dags with many small blocks.")]),e._v(" "),a("blockquote",[a("p",[e._v("The biggest issue it would solve is resolved by this proposal (requesting a merkle proof for a path).")])]),e._v(" "),a("p",[e._v("There are use-cases other than simple IPLD paths:")]),e._v(" "),a("ul",[a("li",[e._v("unixfs paths. IPLD paths (at least the current ones) can't transparently traverse sharded directories.")]),e._v(" "),a("li",[e._v("seeking to a some offset in a large file (e.g., for video streaming).")])]),e._v(" "),a("p",[e._v("Note: We don't need to support these use-cases out of the box, we just need to provide a system that's flexible enough that we (or others) can extend it with new selectors.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-11-09t21-26-54z-stebalien"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-11-09t21-26-54z-stebalien"}},[e._v("#")]),e._v(" (2018-11-09T21:26:54Z) Stebalien:")]),e._v(" "),a("p",[e._v("Concrete use-cases we need to support:")]),e._v(" "),a("ol",[a("li",[e._v("Load a web-page in a single round-trip. That is, one RT to a stream from "),a("code",[e._v("/ipfs/Qm.../a/b/c/d")]),e._v(". That is, we can't be worse than HTTP.")]),e._v(" "),a("li",[e._v("Sync a hight N blockchain in O(N) round trips.")])]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-11-10t00-38-04z-mikeal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-11-10t00-38-04z-mikeal"}},[e._v("#")]),e._v(" (2018-11-10T00:38:04Z) mikeal:")]),e._v(" "),a("blockquote",[a("p",[e._v('Who\'s "we". I thought "we" had already reached consensus that we did need them. They\'re quite literally the entire point of GraphSync.')])]),e._v(" "),a("p",[e._v('Who is the "we" that '),a("em",[e._v("already")]),e._v(" reached a consensus? These concerns have been bubbling for months, we set aside time to unblock them at Lab Week, we wrote up the session proposals ahead of time so people knew they would be happening. There were two sessions, one about replication generally and one about GraphSync specifically. I don't recall who was in each session because it differed between them, but @vmx and I were in both and @diasdavid was either in one of them or we had some sync up after. "),a("strong",[e._v("[Added Note: I just remembered that it was @diasdavid who first recommended we more formally write up the different conditions for replication]")]),e._v(" This PR is the followup from those sessions.")]),e._v(" "),a("p",[e._v("Anyway, I don't think we're going to make progress continuing this way. A few things need to be clear:")]),e._v(" "),a("ol",[a("li",[e._v("There is no one-size-fits-all replication strategy.")]),e._v(" "),a("li",[e._v("We should not continue to pursue solutions without a coherent model of the problem. A single statement about a use case is a not a coherent model, all of these use cases have multiple dimensions to them and when you explore that model you'll see that caching is a part of that model and is unsupported by these solutions to replication.")]),e._v(" "),a("li",[e._v('We should probably stop using the term "GraphSync." There are 3 wildly different proposals and the term now carries so much history with it that we can\'t unwind the requirements or steer it in a different direction no matter how much we try.')])]),e._v(" "),a("p",[e._v('I\'ll be creating a "replication" repo today. That repo will serve as a place to discuss the problem space and model out different conditions and test approaches. Based on our sessions at Lab Week I think that this proposal, whatever we end up calling it, solves the largest performance bottlenecks.')]),e._v(" "),a("p",[e._v("The common thread in all of the proposals is that we need a more RPC style interface for replication over libp2p. In the short term we should try to make progress on the necessary changes to enable these interfaces in a modular way so that we can continue to layer on additional APIs for replicators in the future.")]),e._v(" "),a("p",[e._v("Also, I think we should break IPLD Selectors into its own spec/PR. Even if you don't send them over the network this selector syntax is an incredible tool at the user API level.")]),e._v(" "),a("p",[e._v("Now, just so that they don't get lost in the transition to the replication repo, a few more replies:")]),e._v(" "),a("blockquote",[a("p",[e._v("Usually, sending a few extra blocks won't be a problem. As long as the receiver can tell the sender to stop sending some sub-dag, we should be fine.")])]),e._v(" "),a("p",[e._v("I don't think the gains from asking for an indefinite number of blocks will be larger than the lost performance of sending unnecessary blocks until a roundtrip tells the other end to stop sending. You're saving a traversal roundtrip at the expense of many potential cancellation roundtrips, so the gains only play out if 1) there is no cache or 2) changed parts of the graph are greater than the unchanged parts of the graph.")]),e._v(" "),a("p",[e._v("For the vast majority of use cases mutations are relatively small and as the size of the graph grows the changes tend to become a smaller portion of that graph. In this model if a single chunk of a large file changed I'd still end up waiting for all the chunks to return since all the chunks of the file are referenced in a single parent. The same goes for large directories that aren't big enough to be sharded (less than a couple thousand files). If a single file changes I'm sitting there consuming and then stopping the subgraph for every file but the one that changed.")]),e._v(" "),a("p",[e._v("This is why I was so adamant that the only use case this is preferred for is one where the client contains no cache and is only connected to a single peer. For what it's worth, we spent the first session at Lab Week defining a bunch of replication conditions and following all of these problems with this particular strategy.")]),e._v(" "),a("blockquote",[a("p",[e._v("You can also improve this with better traversal orders. For example, a sender can send node A's siblings before sending node A's children, giving the receiver time to receive, parse, and potentially cancel some of node A's children before they're sent.")])]),e._v(" "),a("p",[e._v("What are the network and peer conditions we're trying to optimize for here?")]),e._v(" "),a("p",[e._v("The trouble I have with seeing the gains here is that the client roundtrips for requesting subtrees are no longer a factor in total performance once you've saturated the downstream connection.")]),e._v(" "),a("p",[e._v("In the case that we are requesting blocks in parallel from a single peer we "),a("em",[e._v("should")]),e._v(" saturate the connection relatively quickly unless it's an incredibly deep tree with almost no width at each level. Each level of depth in the tree we gain a mode or parallelism, so it would have to be of a very particular shape. If we're doing the requesting we also have the option of spreading out these requests to other peers and the gains at each layer of depth extend beyond the upstream capabilities of a single peer.")]),e._v(" "),a("p",[e._v("In the case we're asking for an indefinite number of blocks, we have this single peer, which we're requesting "),a("em",[e._v("everything")]),e._v(" from because you can't parallelize this request, and the graph is shaped in such a way that there's little to no width. That's very particular and I'd like to know more about these particular graphs if we are to design a replication scheme optimized for them. It seems like in a graph of this shape we would also have a good idea of the few CIDs in cache that it can safely stop traversal at that we should also include in this replication scheme.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-11-10t00-44-02z-mikeal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-11-10t00-44-02z-mikeal"}},[e._v("#")]),e._v(" (2018-11-10T00:44:02Z) mikeal:")]),e._v(" "),a("blockquote",[a("p",[e._v("Load a web-page in a single round-trip. That is, one RT to a stream from /ipfs/Qm.../a/b/c/d. That is, we can't be worse than HTTP.")])]),e._v(" "),a("p",[e._v("Why are we comparing the performance of a single request for a single resources? That's not a complete use case much less a complete model of the problem.")]),e._v(" "),a("p",[e._v("The way web pages load in the browser over HTTP are similar to the method we're proposing for graph retrieval (grab a resource, examine it, graph sub-resources in parallel). The difference is that our caching semantics are much better as we don't have to make a followup request (if-none-match) when we have a resource in cache.")]),e._v(" "),a("p",[e._v("Yes, the shape of unixfs means that the files are in sub-resources we have to traverse. But throwing away the caching semantics is hardly worth those performance gains.")]),e._v(" "),a("p",[e._v("Finally, the biggest leg up HTTP performance has on us "),a("em",[e._v("when there isn't a cache")]),e._v(" isn't even at the replication level, it's in the fact that they don't have to do a DHT lookup and establish a network in order to start getting content.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-11-10t00-51-26z-whyrusleeping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-11-10t00-51-26z-whyrusleeping"}},[e._v("#")]),e._v(" (2018-11-10T00:51:26Z) whyrusleeping:")]),e._v(" "),a("blockquote",[a("p",[e._v('Who is the "we" that already reached a consensus?')])]),e._v(" "),a("p",[e._v("That would be myself, @jbenet, @diasdavid, @Stebalien and several others, and the consensus on needing to be able to send selectors over the network, and get back multiple blocks for a single request like that, has been agreed upon for several years at this point. The primary reason it hasnt progressed has been (primarily, from my point of view) not having a clear way to represent these selectors. We had all agreed on the shape of the tool, and roughly how it would work. We have tried many times to express that, and even when we talked with @vmx in Berlin expressed a consistent view of the world (though maybe not clearly enough).")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-11-10t01-22-16z-mikeal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-11-10t01-22-16z-mikeal"}},[e._v("#")]),e._v(" (2018-11-10T01:22:16Z) mikeal:")]),e._v(" "),a("blockquote",[a("p",[e._v("We had all agreed on the shape of the tool, and roughly how it would work. We have tried many times to express that, and even when we talked with @vmx in Berlin expressed a consistent view of the world (though maybe not clearly enough).")])]),e._v(" "),a("p",[e._v("The solution proposed has been consistent, from my point of view. The problem it is meant to solve has not been consistently expressed.")]),e._v(" "),a("p",[e._v("I appreciate that a lot of thought went into the mechanics of how this solution would work. The problem is, every time we've tried to find a path to implementing it we've had to examine how it actually solves replication issues and that has unearthed a lot of problems. Whenever we've tried to address these problems we've gotten push back that \"no, this is the solution we agreed to\" when we are very confident at this point that it is not a suitable solution to most replication cases.")]),e._v(" "),a("p",[e._v("We've brought these problems up in written form several times and could not make progress. We created a session at Lab Week in order to un-block this work and succeeded on a path forward which is now, again, being blocked.")]),e._v(" "),a("p",[e._v("At this point I don't have any faith that we'll find a resolution continuing with this process. I'll try to lay out a framework in the replication repo that can give a more productive process to continue under.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-11-12t13-23-48z-vmx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-11-12t13-23-48z-vmx"}},[e._v("#")]),e._v(" (2018-11-12T13:23:48Z) vmx:")]),e._v(" "),a("blockquote",[a("p",[e._v("There were two sessions, one about replication generally and one about GraphSync specifically.")])]),e._v(" "),a("p",[e._v("@hannahhoward was also attending the discussion about GraphSync")]),e._v(" "),a("p",[e._v('I think a I need to clarify why my view is different from what we discussed in Berlin. In Berlin I think I finally got a good understanding of what people mean when they talk about GraphSync. I really liked the idea sending powerful selectors over the network. Though during the GraphSync Deep-Dive in Berlin, I realised (thanks to @b5, @mib-kd743naq) that for merkle verification purpose, you need to a lot of more nodes than the actual selector suggests (think of e.g. "give me all leaf nodes for a file cat"). So the selectors a user requests with will be different from what is sent over the network to another peer. This then lead to '),a("a",{attrs:{href:"https://github.com/ipld/specs/pull/66",target:"_blank",rel:"noopener noreferrer"}},[e._v("GraphSync (A) proposal"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("I used this as a basis for further discussion. Then @mikeal and made in even simpler, which then lead to this proposal. Finding agreement was kind of easy as we both have a history in the replication/offline first world.")]),e._v(" "),a("p",[e._v("The "),a("a",{attrs:{href:"https://github.com/ipld/specs/pull/75",target:"_blank",rel:"noopener noreferrer"}},[e._v("GraphSync (B) proposal"),a("OutboundLink")],1),e._v(" came as a surprise for me, I didn't know that anyone is working on that. It wasn't mentioned to me neither in Berlin, nor in Glasgow.")]),e._v(" "),a("p",[e._v('Anyway, I think the overlap is quite large. One major difference is just what "IPLD Selectors" mean to everyone. For me they are that user facing things to do complex graph traversals and not some internal implementation detail to make those traversals work.')]),e._v(" "),a("p",[e._v("PS: I forgot to /cc @pgte and @aschmahmann.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-11-12t21-23-10z-stebalien"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-11-12t21-23-10z-stebalien"}},[e._v("#")]),e._v(" (2018-11-12T21:23:10Z) Stebalien:")]),e._v(" "),a("p",[e._v("At the end of the day, I think the misunderstanding is what graphsync is trying to solve. We "),a("em",[e._v("do")]),e._v(" want selectors for user queries however, we can just use those with bitswap. We needed a new "),a("em",[e._v("network protocol")]),e._v(" because bitswap has a severe limitation: we can't ask for anything we can't name "),a("em",[e._v("directly by cid")]),e._v(". This puts some pretty harsh theoretical limits on bitswap's performance in "),a("em",[e._v("some")]),e._v(" use-cases (blockchains, git, pathing, streaming balanced dags, etc.).")]),e._v(" "),a("p",[e._v('So yeah, I think a decent place to start is to just implement selectors. The idea behind GraphSync B is that we can then just send these selectors over the network iff the other party supports them. Otherwise, we\'d "lower" them to the most powerful, selector the other peer '),a("em",[e._v("does")]),e._v(" support and then run an interactive protocol. GraphSync C is equivalent (mostly) to a GraphSync B that only supports the CID and IPLD path selector.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-11-15t16-08-59z-daviddias"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-11-15t16-08-59z-daviddias"}},[e._v("#")]),e._v(" (2018-11-15T16:08:59Z) daviddias:")]),e._v(" "),a("p",[e._v("So, is GraphSync C just a MVP of GraphSync B? Can we name it that way instead of making it a separate proposal?")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2018-11-19t18-29-58z-mikeal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-11-19t18-29-58z-mikeal"}},[e._v("#")]),e._v(" (2018-11-19T18:29:58Z) mikeal:")]),e._v(" "),a("blockquote",[a("p",[e._v("So, is GraphSync C just a MVP of GraphSync B?")])]),e._v(" "),a("p",[e._v("No, it's a different approach to replication.")]),e._v(" "),a("blockquote",[a("p",[e._v("Can we name it that way instead of making it a separate proposal?")])]),e._v(" "),a("p",[e._v("We're going to be breaking these apart into individual APIs and start talking/implementing them that way rather than taking an entire replication flow and specing/implementing it at once.")]),e._v(" "),a("p",[e._v("We still need to prioritize, but an implementation of selectors and the new RPC-style API for getting a merkel proof for a path seem like the best places to start.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2019-01-08t01-50-13z-momack2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2019-01-08t01-50-13z-momack2"}},[e._v("#")]),e._v(" (2019-01-08T01:50:13Z) momack2:")]),e._v(" "),a("p",[e._v("@Stebalien @whyrusleeping can you please take a look at this and the delta to "),a("a",{attrs:{href:"https://github.com/ipld/specs/pull/75",target:"_blank",rel:"noopener noreferrer"}},[e._v("Proposal B"),a("OutboundLink")],1),e._v(" prior to the meeting next week and add any issues/constraints that we aren't fully specifying here?")]),e._v(" "),a("p",[e._v("@vmx and @mikeal if you could specify in what way this approach to replication differs from proposal B, that'd probably help expedite Steb and Why's review.")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2019-01-09t12-13-59z-vmx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2019-01-09t12-13-59z-vmx"}},[e._v("#")]),e._v(" (2019-01-09T12:13:59Z) vmx:")]),e._v(" "),a("p",[e._v("Differences to "),a("a",{attrs:{href:"https://github.com/ipld/specs/pull/75",target:"_blank",rel:"noopener noreferrer"}},[e._v("Proposal B"),a("OutboundLink")],1),e._v(":")]),e._v(" "),a("p",[e._v("Selectors:")]),e._v(" "),a("ul",[a("li",[e._v('This proposal needs only a subset of the selectors, the "CID Selector" and "Path Selector".')])]),e._v(" "),a("p",[e._v("Graphsync:")]),e._v(" "),a("ul",[a("li",[e._v('In this proposal you can request multiple blocks. In Proposal B this would be done with sending a "Multi Selector" with several "CID Selectors".')]),e._v(" "),a("li",[e._v("The request and responses are kept to the bare minimum and don't have things like priorities.")]),e._v(" "),a("li",[e._v("The request/responses are modeled similar to the "),a("a",{attrs:{href:"https://github.com/memcached/memcached/wiki/BinaryProtocolRevamped",target:"_blank",rel:"noopener noreferrer"}},[e._v("Memcache Binary Protocol"),a("OutboundLink")],1),e._v(". The main difference is that you don't get back a single reply as in Proposal B, but you get back several replies. This way you can start processing early on before the full request is processed. If e.g. you can't get a certain block, you can start early trying to get that block from another peer.")])]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2019-01-09t18-08-01z-whyrusleeping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2019-01-09t18-08-01z-whyrusleeping"}},[e._v("#")]),e._v(" (2019-01-09T18:08:01Z) whyrusleeping:")]),e._v(" "),a("p",[e._v("Note: Proposal B does not require any particular selectors, many selectors are described to motivate certain features of the protocol, but we don't necessarily need to implement more than a couple of the simpler selectors.")]),e._v(" "),a("p",[e._v("In addition, I think there was some misreading of that document (granted, its a bit messy). Multiple blocks may be requested at once in that proposal as well, each RPC object contains multiple requests, which ends up working just the same as having multiple blocks per request, but with a bit more control.")]),e._v(" "),a("p",[e._v("Also, in proposal B, you can get any number of responses from a single request. There are explicitly response codes for intermediate responses and terminal responses, and if a request needs multiple blocks returned for it, these can each be sent back via different responses (all responses reference the ID of the request).")]),e._v(" "),a("p",[e._v("The additional fields, like priority, 'extra', and cancel are all really important. (Especially cancel, how do you tell the other side you are no longer interested in a particular piece of data?)")]),e._v(" "),a("p",[e._v("One thing that Proposal B also allows, that @Stebalien and I have been trying to get for a while, is the ability to update a request. So I could send a request for some selector, and then send selectors as 'cancels', basically telling that peer to not bother giving me some subset, which can be really useful for large multi-peer requests. (Note: The important part is that this is "),a("em",[e._v("allowed")]),e._v(" by the protocol, not that we necessarily implement it right now)")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2019-01-11t11-32-58z-vmx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2019-01-11t11-32-58z-vmx"}},[e._v("#")]),e._v(" (2019-01-11T11:32:58Z) vmx:")]),e._v(" "),a("blockquote",[a("p",[e._v("In addition, I think there was some misreading of that document (granted, its a bit messy). Multiple blocks may be requested at once in that proposal as well, each RPC object contains multiple requests, which ends up working just the same as having multiple blocks per request, but with a bit more control.")])]),e._v(" "),a("p",[e._v('I indeed missed that. It\'s clear after a re-read. So you can do a "get multiple blocks" request. Though you can do a lot more. I fear that it adds a lot of complexity as you could send arbitrary selectors which then return an arbitrary amount of blocks.')]),e._v(" "),a("blockquote",[a("p",[e._v("(all responses reference the ID of the request).")])]),e._v(" "),a("p",[e._v("It's the same for this proposal, I just didn't mention it explicitly for simplicity. I consider that an implementation detail (which might libp2p even deal with automatically transparently).")]),e._v(" "),a("blockquote",[a("p",[e._v("One thing that Proposal B also allows, that @Stebalien and I have been trying to get for a while, is the ability to update a request. So I could send a request for some selector, and then send selectors as 'cancels', basically telling that peer to not bother giving me some subset, which can be really useful for large multi-peer requests. (Note: The important part is that this is "),a("em",[e._v("allowed")]),e._v(" by the protocol, not that we necessarily implement it right now)")])]),e._v(" "),a("p",[e._v("Could this be implemented in this proposal as: If you send a request with the same ID it's and upgrade? For me it would be good enough to make this \"somehow\" possible. I don't see this being implemented soon and I prefer not to plan for too many too distant features.")]),e._v(" "),a("p",[e._v("So it sounds like Proposal B is a superset of Proposal C. So the question is, what is Proposal C missing from Proposal B that can't be added in the future?")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"_2019-01-11t17-49-46z-whyrusleeping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2019-01-11t17-49-46z-whyrusleeping"}},[e._v("#")]),e._v(" (2019-01-11T17:49:46Z) whyrusleeping:")]),e._v(" "),a("blockquote",[a("p",[e._v("So the question is, what is Proposal C missing from Proposal B that can't be added in the future?")])]),e._v(" "),a("p",[e._v("I guess I would say its lacking a concrete proposal. With B being a superset of C, I would propose using the protocol described in B to implement the features described here. One thing I would like to make sure is that we don't have to break the protocol completely every time we add a new feature, new selector implementations shouldnt require a whole new protocol, it should just be an opcode within the exisitng protocol that causes another side that doesnt understand it to return an error. You know, the multiformats way.")])])}),[],!1,null,null,null);t.default=o.exports}}]);