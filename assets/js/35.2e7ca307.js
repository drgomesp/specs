(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{303:function(e,t,a){"use strict";a.r(t);var s=a(13),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("!!!")]),e._v(" "),a("p",[e._v("This document has "),a("strong",[e._v("moved")]),e._v(".")]),e._v(" "),a("p",[e._v("You'll now find information like this in the "),a("a",{attrs:{href:"https://github.com/ipld/ipld/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ipld/ipld"),a("OutboundLink")],1),e._v(" meta-repo,\nand published to the web at https://ipld.io/ .")]),e._v(" "),a("p",[e._v("All documentation, fixtures, specifications, and web content is now gathered into that repo.\nPlease update your links, and direct new contributions there.")]),e._v(" "),a("p",[e._v("!!!")]),e._v(" "),a("hr"),e._v(" "),a("h1",{attrs:{id:"ethereum-state-data-structures"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ethereum-state-data-structures"}},[e._v("#")]),e._v(" Ethereum State Data Structures")]),e._v(" "),a("p",[e._v("Ethereum state is stored in four different modified merkle patricia tries (MMPTs): the transaction, receipt, state, and storage tries.\nAt each block there is one transaction, receipt, and state trie which are referenced by their root hashes in the block "),a("code",[e._v("Header")]),e._v(". For every contract\ndeployed on Ethereum there is a storage trie used to hold that contract's persistent variables, each storage trie is referenced by their root hash\nin the state account object stored in the state trie leaf node corresponding to that contract's address.")]),e._v(" "),a("h2",{attrs:{id:"trie-node-ipld"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trie-node-ipld"}},[e._v("#")]),e._v(" Trie Node IPLD")]),e._v(" "),a("p",[e._v("This is the general MMPT node IPLD schema used by all the below MMPTs (everything below\nexcept the AccountSnapshot). The different tries are broken up and explicitly typed below in order to demonstrate the\ndifferent purposes and contents of these trie structures.")]),e._v(" "),a("ul",[a("li",[e._v("If leaf or extension node: There will be two elements; [0] is the compact encoded partial path, [1] is val.\n"),a("ul",[a("li",[e._v("For extension nodes, val is the hash of the child node it references.")]),e._v(" "),a("li",[e._v("For leaf nodes, val is the RLP encoded value stored at that leaf.\n"),a("ul",[a("li",[e._v("For the tx trie this value is a transaction.")]),e._v(" "),a("li",[e._v("For the receipt trie this value is a receipt.")]),e._v(" "),a("li",[e._v("For the state trie this value is a state account.")]),e._v(" "),a("li",[e._v("For the storage trie this value is the value of a contract variable.")])])]),e._v(" "),a("li",[e._v("Partial path is the path remaining between the current path and the full path.\n"),a("ul",[a("li",[e._v("If the first nibble in the prefix byte of the key is 0, the node is an extension node with an even length key; The second nibble in the prefix byte is padding (0) and the key fits in the remaining bytes.")]),e._v(" "),a("li",[e._v("If the first nibble in the prefix byte of the key is 1, the node is an extension node with an odd length key; The second nibble in the prefix byte is actually the first nibble of the key, the rest of the key fits in the remaining bytes.")]),e._v(" "),a("li",[e._v("If the first nibble in the prefix byte of the key is 2, the node is a leaf node with an even length key; The second nibble in the prefix byte is padding (0) and the key fits in the remaining bytes.")]),e._v(" "),a("li",[e._v("If the first nibble in the prefix byte of the key is 3, the node is a leaf node with an odd length key; The second nibble in the prefix byte is actually the first nibble of the key, the rest of the key fits in the remaining bytes.\n"),a("ul",[a("li",[e._v("E.g. for a leaf node at path "),a("code",[e._v("ce57")]),e._v(" that holds the state account for the address hash "),a("code",[e._v("ce573ced93917e658d10e2d9009470dad72b63c898d173721194a12f2ae5e190")]),e._v(",\nthe compact encoded partial path will be "),a("code",[e._v("23ced93917e658d10e2d9009470dad72b63c898d173721194a12f2ae5e190")]),e._v(".")])])])])])])]),e._v(" "),a("li",[e._v("If branch node: There will be 17 elements; [0] - [15] store the hashes of the child nodes at the next hex character (0-f) step down a path, [16] is val.\n"),a("ul",[a("li",[e._v("If there are no further nodes down one of the branch's paths, an empty byte array is stored in the corresponding element.")])])])]),e._v(" "),a("p",[e._v("NOTE: if the value stored at a leaf node would be smaller than or equal to the length of the hash of that leaf node (<= 32 bytes) then\nthe value is directly included in the parent branch or extension node rather than the parent node linking to the entire leaf node.\nIn this case the child is a one element list of bytes where that one element is the RLP encoded value itself. In practice this is only possible for\nthe storage trie, as RLP encoded transactions, receipts, and state accounts are always greater than 32 bytes in length.")]),e._v(" "),a("div",{staticClass:"language-ipldsch extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ipldsch"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# TrieNode ADL")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Node IPLD values are RLP encoded; node IPLD multihashes are always the KECCAK_256 hash of the RLP encoded node bytes and the codec is dependent on the type of the trie")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token typedef"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("TrieNode")])]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("struct")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    Elements "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Bytes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("h2",{attrs:{id:"maybe-make-trienode-a-union-type-of-3-different-node-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#maybe-make-trienode-a-union-type-of-3-different-node-types"}},[e._v("#")]),e._v(" Maybe make TrieNode a union type of 3 different node types")]),e._v(" "),a("h2",{attrs:{id:"transaction-trie-ipld"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transaction-trie-ipld"}},[e._v("#")]),e._v(" Transaction Trie IPLD")]),e._v(" "),a("p",[e._v("This is the IPLD schema type for transaction trie nodes.")]),e._v(" "),a("ul",[a("li",[e._v("The IPLD block is the RLP encoded trie node.")]),e._v(" "),a("li",[e._v("Leaf node keys are the RLP encoding of the transaction's index.")]),e._v(" "),a("li",[e._v("Leaf node values are the RLP encoded transaction.")]),e._v(" "),a("li",[e._v("CID links to transaction trie nodes use a KECCAK_256 multihash of the RLP encoded node and the EthTxTrie codec (0x92).")]),e._v(" "),a("li",[e._v("The root node of the transaction trie is referenced in an Ethereum "),a("code",[e._v("Header")]),e._v(" by the "),a("code",[e._v("TxRootCID")]),e._v(".")])]),e._v(" "),a("div",{staticClass:"language-ipldsch extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ipldsch"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# TxTrieNode is an IPLD block for a node in the transaction trie")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token typedef"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("TxTrieNode")])]),e._v(" TrieNode\n")])])]),a("h2",{attrs:{id:"receipt-trie-ipld"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#receipt-trie-ipld"}},[e._v("#")]),e._v(" Receipt Trie IPLD")]),e._v(" "),a("p",[e._v("This is the IPLD schema type for receipt trie nodes.")]),e._v(" "),a("ul",[a("li",[e._v("The IPLD block is the RLP encoded trie node.")]),e._v(" "),a("li",[e._v("Leaf node keys are the RLP encoding of the receipt's index.")]),e._v(" "),a("li",[e._v("Leaf node values are the RLP encoded receipt.")]),e._v(" "),a("li",[e._v("CID links to receipt trie nodes use a KECCAK_256 multihash of the RLP encoded node and the EthTxReceiptTrie codec (0x94).")]),e._v(" "),a("li",[e._v("The root node of the receipt trie is referenced in an Ethereum "),a("code",[e._v("Header")]),e._v(" by the "),a("code",[e._v("RctRootCID")]),e._v(".")])]),e._v(" "),a("div",{staticClass:"language-ipldsch extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ipldsch"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# RctTrieNode is an IPLD block for a node in the receipt trie")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token typedef"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("RctTrieNode")])]),e._v(" TrieNode\n")])])]),a("h2",{attrs:{id:"state-trie-ipld"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-trie-ipld"}},[e._v("#")]),e._v(" State Trie IPLD")]),e._v(" "),a("p",[e._v("This is the IPLD schema type for state trie nodes.")]),e._v(" "),a("ul",[a("li",[e._v("The IPLD block is the RLP encoded trie node.")]),e._v(" "),a("li",[e._v("Leaf node keys are the KECCAK_256 hash of the account address.")]),e._v(" "),a("li",[e._v("Leaf node values are the RLP encoded state accounts.")]),e._v(" "),a("li",[e._v("CID links to state trie nodes use a KECCAK_256 multihash of the RLP encoded node and the EthStateTrie codec (0x96).")]),e._v(" "),a("li",[e._v("The root node of the state trie is referenced in an Ethereum "),a("code",[e._v("Header")]),e._v(" by the "),a("code",[e._v("StateRootCID")]),e._v(".")])]),e._v(" "),a("div",{staticClass:"language-ipldsch extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ipldsch"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# StateTrieNode is an IPLD block for a node in the state trie")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token typedef"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("StateTrieNode")])]),e._v(" TrieNode\n")])])]),a("h2",{attrs:{id:"state-account-ipld"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-account-ipld"}},[e._v("#")]),e._v(" State Account IPLD")]),e._v(" "),a("p",[e._v("This is the IPLD schema for a state account in the Ethereum state trie.")]),e._v(" "),a("ul",[a("li",[e._v("The IPLD block is the RLP encoded state account, this is the object stored as the value in a StateTrieNode leaf.")]),e._v(" "),a("li",[e._v("CID links to state accounts use a KECCAK_256 multihash of the RLP encoded state account and the EthAccountSnapshot codec (0x97).")])]),e._v(" "),a("div",{staticClass:"language-ipldsch extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ipldsch"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Account is the Ethereum consensus representation of accounts.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# These objects are stored in the state trie leafs.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token typedef"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("StateAccount")])]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("struct")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    Nonce    Uint\n    Balance  Balance\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# CID link to the storage trie root node")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This CID links down to all of the storage nodes that exist for this account at this block")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This CID uses the EthStorageTrie codec (0x98)")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If this is a contract account the multihash is a KECCAK_256 hash of the RLP encoded root storage node")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If this is an externally controlled account, the multihash is a KECCAK_256 hash of an RLP encoded empty byte array")]),e._v("\n    StorageTrieCID "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("&")]),e._v("StorageTrieNode\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# CID link to the bytecode for this account")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This CID uses the Raw codec (0x55)")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If this is a contract account the multihash is a KECCAK_256 hash of the contract byte code for this contract")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If this is an externally controlled account the multihash is the KECCAK_256 hash of an empty byte array")]),e._v("\n    CodeCID "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("&")]),e._v("ByteCode\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token typedef"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ByteCode")])]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("bytes")]),e._v("\n")])])]),a("h2",{attrs:{id:"storage-trie-ipld"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#storage-trie-ipld"}},[e._v("#")]),e._v(" Storage Trie IPLD")]),e._v(" "),a("p",[e._v("This is the IPLD schema type for storage trie nodes.")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Leaf node keys are the KECCAK_256 hash of the storage slot key.")])]),e._v(" "),a("li",[a("p",[e._v("The value of a storage slot key is ultimately dependent on the EVM byte code compiler used.\nFor solidity, the most widely used compiler, the keys are generated as such:")]),e._v(" "),a("ol",[a("li",[e._v("First, slot position is defined as the position a variable is declared. E.g. the first variable declared in a smart contract\nwill have a slot position of "),a("code",[e._v("0")]),e._v(".")]),e._v(" "),a("li",[e._v("For primitive data type variables- such as "),a("code",[e._v("string")]),e._v(", "),a("code",[e._v("int")]),e._v(", "),a("code",[e._v("bool")]),e._v("- their storage slot key is the 32-byte left-padded slot position.\nE.g. for an "),a("code",[e._v("int")]),e._v(" declared as the first variable in a contract its slot key is equal to "),a("code",[e._v("0000000000000000000000000000000000000000000000000000000000000000")]),e._v("\nand its leaf node key is KECCAK_256("),a("code",[e._v("0000000000000000000000000000000000000000000000000000000000000000")]),e._v(").")]),e._v(" "),a("li",[e._v("For composite data type variables things get more complicated, e.g. for mappings, each entry in the mapping is stored at a different storage leaf. The storage slot key for a specific entry in a mapping is\ncalculated as the KECCAK_256 hash of the entry's key in the map + the mapping's slot position. E.g. for a mapping "),a("code",[e._v("mapping(address => uint)")]),e._v(" that is declared\nas the first variable in a contract, the storage slot key for the mapping element with key "),a("code",[e._v("0x89205A3A3b2A69De6Dbf7f01ED13B2108B2c43e7")]),e._v(" will be equal to\nKECCAK_256("),a("code",[e._v("0x89205A3A3b2A69De6Dbf7f01ED13B2108B2c43e7")]),e._v(" + "),a("code",[e._v("0000000000000000000000000000000000000000000000000000000000000000")]),e._v("). The leaf node key will then be equal\nto the hash of this storage slot key e.g. KECCAK_256(KECCAK_256("),a("code",[e._v("0x89205A3A3b2A69De6Dbf7f01ED13B2108B2c43e7")]),e._v(" + "),a("code",[e._v("0000000000000000000000000000000000000000000000000000000000000000")]),e._v(")).")])])]),e._v(" "),a("li",[a("p",[e._v("Leaf node values are the RLP encoded storage values.")])]),e._v(" "),a("li",[a("p",[e._v("CID links to storage trie nodes use a KECCAK_256 multihash of the RLP encoded node and the EthStorageTrie codec (0x98).")])])]),e._v(" "),a("div",{staticClass:"language-ipldsch extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ipldsch"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# StorageTrieNode is an IPLD block for a node in the storage trie")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The root node of the storage trie is referenced in an StateAccount by the StorageTrieCID")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token typedef"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("StorageTrieNode")])]),e._v(" TrieNode\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);