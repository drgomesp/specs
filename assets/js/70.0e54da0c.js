(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{338:function(e,t,a){"use strict";a.r(t);var o=a(13),n=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("!!!")]),e._v(" "),a("p",[e._v("This document has "),a("strong",[e._v("moved")]),e._v(".")]),e._v(" "),a("p",[e._v("You'll now find information like this in the "),a("a",{attrs:{href:"https://github.com/ipld/ipld/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ipld/ipld"),a("OutboundLink")],1),e._v(" meta-repo,\nand published to the web at https://ipld.io/ .")]),e._v(" "),a("p",[e._v("All documentation, fixtures, specifications, and web content is now gathered into that repo.\nPlease update your links, and direct new contributions there.")]),e._v(" "),a("p",[e._v("!!!")]),e._v(" "),a("hr"),e._v(" "),a("h1",{attrs:{id:"ipld-data-model-numbers-and-ipld-codecs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ipld-data-model-numbers-and-ipld-codecs"}},[e._v("#")]),e._v(" IPLD Data Model numbers and Ipld Codecs")]),e._v(" "),a("p",[a("strong",[e._v("Author")]),e._v(": Volker Mische ("),a("a",{attrs:{href:"https://github.com/vmx",target:"_blank",rel:"noopener noreferrer"}},[e._v("@vmx"),a("OutboundLink")],1),e._v(")")]),e._v(" "),a("p",[e._v("This is an exploration report about how to serialize "),a("a",{attrs:{href:"https://specs.ipld.io/data-model-layer/data-model.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("IPLD Data Model"),a("OutboundLink")],1),e._v(" numbers into bytes and back.")]),e._v(" "),a("h2",{attrs:{id:"canonical-representations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#canonical-representations"}},[e._v("#")]),e._v(" Canonical representations")]),e._v(" "),a("p",[e._v("In IPLD it's desirable to have one single representation for every instance of the Data Model. This would lead to a bijective mapping between the Data Model and the encoded bytes. If you have a Data Model instance and you use a specific codec, it should always result in the same bytes, independent of the programming language used. That's important for content-addressing.")]),e._v(" "),a("h3",{attrs:{id:"conversion-into-the-data-model"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#conversion-into-the-data-model"}},[e._v("#")]),e._v(" Conversion into the Data Model")]),e._v(" "),a("p",[e._v("This looks like a hard problem, e.g. if you look at this IPFS issue with "),a("a",{attrs:{href:"https://specs.ipld.io/block-layer/codecs/dag-cbor.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("DAG-CBOR"),a("OutboundLink")],1),e._v(" where there is a "),a("a",{attrs:{href:"https://github.com/ipld/interface-ipld-format/issues/9#issuecomment-431029329",target:"_blank",rel:"noopener noreferrer"}},[e._v("different encoding between JavaScript and Go when numbers are integers"),a("OutboundLink")],1),e._v(". Though in this issue, the problem is "),a("strong",[e._v("not")]),e._v(" the Data Model to Codec conversion. The problem is the "),a("strong",[e._v("input data to Data Model conversion")]),e._v(". It took me a long time to figure that out.")]),e._v(" "),a("p",[e._v("When I think of the IPLD Data Model I often think in terms of JSON and having numbers represented as text. I then think about how to represent those things as bytes. If you think about it that way, you have problems like: is "),a("code",[e._v("4251.00")]),e._v(" and "),a("code",[e._v("4251")]),e._v(" the same number? If yes, then it should be encoded the same way?")]),e._v(" "),a("p",[e._v("From a Data Model perspective that's a non-issue. You have two kinds of numbers: "),a("a",{attrs:{href:"https://specs.ipld.io/data-model-layer/data-model.html#integer-kind",target:"_blank",rel:"noopener noreferrer"}},[e._v("Integer"),a("OutboundLink")],1),e._v(" and "),a("a",{attrs:{href:"https://specs.ipld.io/data-model-layer/data-model.html#float-kind",target:"_blank",rel:"noopener noreferrer"}},[e._v("Float"),a("OutboundLink")],1),e._v(". You can clearly distinguish between "),a("code",[e._v("Integer(4251)")]),e._v(" and "),a("code",[e._v("Float(4251)")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"serializing-the-data-model"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serializing-the-data-model"}},[e._v("#")]),e._v(" Serializing the Data Model")]),e._v(" "),a("h4",{attrs:{id:"codec-with-multiple-integer-float-sizes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#codec-with-multiple-integer-float-sizes"}},[e._v("#")]),e._v(" Codec with multiple integer/float sizes")]),e._v(" "),a("p",[e._v("Even within the Data Model there might be ambiguities, depending on Codec you use. If your Codec supports more than one integer type (which is often the case), you need to decide which one to choose. The obvious way is what CBOR in its "),a("a",{attrs:{href:"https://tools.ietf.org/html/rfc7049#section-3.9",target:"_blank",rel:"noopener noreferrer"}},[e._v("canonical representation"),a("OutboundLink")],1),e._v(" is doing:")]),e._v(" "),a("blockquote",[a("p",[e._v("Integers must be as small as possible.")])]),e._v(" "),a("p",[e._v("This means that a codec that supports 8-bit to 64-bit integers will encode "),a("code",[e._v("8472")]),e._v(" always as "),a("code",[e._v("0x2118")]),e._v(" and never as "),a("code",[e._v("0x00002118")]),e._v(".")]),e._v(" "),a("p",[e._v("For floating point numbers (I always mean "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/IEEE_754",target:"_blank",rel:"noopener noreferrer"}},[e._v("binary IEEE-754 floating point numbers"),a("OutboundLink")],1),e._v(", others don't matter in modern day computing) the same issue arises. If your codec supports more than one floating point number type, e.g. 32-bit single precision and 64-bit double precision, a number like "),a("a",{attrs:{href:"https://float.exposed/0x3e4cc000",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("0.199951171875")]),a("OutboundLink")],1),e._v(" could be represented as "),a("code",[e._v("0x3e4cc000")]),e._v(" (32-bit) or "),a("code",[e._v("0x3fc9980000000000")]),e._v(" (64-bit). You can, just as with integers, require the smallest lossless representation of a float.")]),e._v(" "),a("p",[e._v("Such a conversion to the smallest possible float makes sense for the sake of having a canonical representation, it doesn't make sense for space savings. Only about 0.00000002% of all the 64-bit floats can be represented as 32-bit floats. So it's not that likely that your data contains exactly those floats.")]),e._v(" "),a("h4",{attrs:{id:"codecs-with-one-type-for-integers-and-one-for-floats"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#codecs-with-one-type-for-integers-and-one-for-floats"}},[e._v("#")]),e._v(" Codecs with one type for integers and one for floats")]),e._v(" "),a("p",[e._v("If you restrict your Codec to a single integer and a single float type, the conversion from the Codec into the IPLD Data Model becomes much simpler, as you obviously don't have to deal with different types.")]),e._v(" "),a("p",[e._v("For integers, you could just a sensibly large integer, e.g. 64-bit and always serialize only into that. In case you want to save bytes, you can use variable sized integers like "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/LEB128",target:"_blank",rel:"noopener noreferrer"}},[e._v("LEB128"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("For floats the only sensible way is using IEEE-754 double precision float only. They are well supported by almost all programming languages.")]),e._v(" "),a("h2",{attrs:{id:"problems-with-javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#problems-with-javascript"}},[e._v("#")]),e._v(" Problems with JavaScript")]),e._v(" "),a("p",[e._v("Creating a canonical representation for numbers is possible when you distinguish between integers and floats. The IPLD Data Model has that property, hence it's not a problem designing a Codec that has a canonical representation of numbers. Though, there is the problem with JavaScript. Currently, most (all?) IPLD Data Model implementations work with native JavaScript types without any wrappers around them. The problem is that historically JavaScript only has a "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Glossary/Number",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("Number")]),a("OutboundLink")],1),e._v(" type, which is always a 64-bit IEEE-754 float. You cannot distinguish between "),a("code",[e._v("4251.00")]),e._v(" and "),a("code",[e._v("4251")]),e._v(". Both are always floats.")]),e._v(" "),a("p",[e._v("This means you can't really round-trip Data Model encodings in JavaScript. It looses the type information whether something was an integer as soon as it becomes a native "),a("code",[e._v("Number")]),e._v(". Possible solutions are using wrapper classes (we do the same in other programming language implementations like Go or Rust) or you leverage the recently introduced "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Glossary/BigInt",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("BigInt")]),a("OutboundLink")],1),e._v(" type.")]),e._v(" "),a("h2",{attrs:{id:"thanks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thanks"}},[e._v("#")]),e._v(" Thanks")]),e._v(" "),a("p",[e._v("Thanks "),a("a",{attrs:{href:"https://github.com/mikeal",target:"_blank",rel:"noopener noreferrer"}},[e._v("@mikeal"),a("OutboundLink")],1),e._v(" for making me put more thought into this and "),a("a",{attrs:{href:"https://github.com/bobbl",target:"_blank",rel:"noopener noreferrer"}},[e._v("@bobbl"),a("OutboundLink")],1),e._v(" for making me realize that most of the difficulties were in fact JavaScript related.")])])}),[],!1,null,null,null);t.default=n.exports}}]);