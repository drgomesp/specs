(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{300:function(e,t,s){"use strict";s.r(t);var a=s(13),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("!!!")]),e._v(" "),s("p",[e._v("This document has "),s("strong",[e._v("moved")]),e._v(".")]),e._v(" "),s("p",[e._v("You'll now find information like this in the "),s("a",{attrs:{href:"https://github.com/ipld/ipld/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ipld/ipld"),s("OutboundLink")],1),e._v(" meta-repo,\nand published to the web at https://ipld.io/ .")]),e._v(" "),s("p",[e._v("All documentation, fixtures, specifications, and web content is now gathered into that repo.\nPlease update your links, and direct new contributions there.")]),e._v(" "),s("p",[e._v("!!!")]),e._v(" "),s("hr"),e._v(" "),s("h1",{attrs:{id:"ethereum-data-structure-basic-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ethereum-data-structure-basic-types"}},[e._v("#")]),e._v(" Ethereum Data Structure Basic Types")]),e._v(" "),s("p",[e._v("These types are used throughout the Ethereum data structures but are themselves not IPLD blocks.")]),e._v(" "),s("div",{staticClass:"language-ipldsch extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ipldsch"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Go big.Int")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Prefer presenting to users either as a number or a string view of the decimal number")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# for readability.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token typedef"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BigInt")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("bytes")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Unsigned integer")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Used to explicity specify that an integer cannot be negative")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token typedef"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Uint")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Block nonce is an 8 byte binary representation of a block's nonce")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token typedef"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BlockNonce")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("bytes")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Hash represents the 32 byte KECCAK_256 hash of arbitrary data.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token typedef"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Hash")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("bytes")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Address represents the 20 byte address of an Ethereum account.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token typedef"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Address")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("bytes")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Bloom represents a 256 byte bloom filter.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token typedef"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Bloom")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("bytes")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Balance represents an account's balance in units of wei (1*10^-18 ETH)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token typedef"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Balance")])]),e._v(" BigInt\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# OpCode is a 1 byte EVM opcode")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token typedef"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("OpCode")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("bytes")]),e._v("\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);